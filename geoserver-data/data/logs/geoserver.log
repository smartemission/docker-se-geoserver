2018-02-13 22:17:34,062 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:17:34,068 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@25199722 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.72500338952385 4.7068066054942665, 50.72500338952385 6.101724215970418, 52.119921 6.101724215970418, 52.119921 4.7068066054942665, 50.72500338952385 4.7068066054942665)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.72500338952385 4.7068066054942665, 50.72500338952385 6.101724215970418, 52.119921 6.101724215970418, 52.119921 4.7068066054942665, 50.72500338952385 4.7068066054942665)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.72500338952385 4.7068066054942665, 50.72500338952385 6.101724215970418, 52.119921 6.101724215970418, 52.119921 4.7068066054942665, 50.72500338952385 4.7068066054942665)) ]
2018-02-13 22:22:33,865 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:22:33,868 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@244b59e0 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.69063765294605 8.037955552667627, 50.69063765294605 9.4451782992362, 52.09786039951462 9.4451782992362, 52.09786039951462 8.037955552667627, 50.69063765294605 8.037955552667627)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.69063765294605 8.037955552667627, 50.69063765294605 9.4451782992362, 52.09786039951462 9.4451782992362, 52.09786039951462 8.037955552667627, 50.69063765294605 8.037955552667627)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.69063765294605 8.037955552667627, 50.69063765294605 9.4451782992362, 52.09786039951462 9.4451782992362, 52.09786039951462 8.037955552667627, 50.69063765294605 8.037955552667627)) ]
2018-02-13 22:26:27,353 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 22:26:27,368 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 22:27:33,976 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:27:33,979 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4260e930 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.52688073852402 6.805277236179627, 50.52688073852402 8.275952447795257, 51.99755595013965 8.275952447795257, 51.99755595013965 6.805277236179627, 50.52688073852402 6.805277236179627)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.52688073852402 6.805277236179627, 50.52688073852402 8.275952447795257, 51.99755595013965 8.275952447795257, 51.99755595013965 6.805277236179627, 50.52688073852402 6.805277236179627)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.52688073852402 6.805277236179627, 50.52688073852402 8.275952447795257, 51.99755595013965 8.275952447795257, 51.99755595013965 6.805277236179627, 50.52688073852402 6.805277236179627)) ]
2018-02-13 22:28:17,758 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:28:17,758 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 22:28:24,758 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:28:24,758 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 22:32:33,883 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:32:33,885 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@498df908 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.640214635751725 8.814254522794965, 50.640214635751725 10.272227353558511, 52.09818746651527 10.272227353558511, 52.09818746651527 8.814254522794965, 50.640214635751725 8.814254522794965)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.640214635751725 8.814254522794965, 50.640214635751725 10.272227353558511, 52.09818746651527 10.272227353558511, 52.09818746651527 8.814254522794965, 50.640214635751725 8.814254522794965)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.640214635751725 8.814254522794965, 50.640214635751725 10.272227353558511, 52.09818746651527 10.272227353558511, 52.09818746651527 8.814254522794965, 50.640214635751725 8.814254522794965)) ]
2018-02-13 22:36:27,344 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 22:36:27,359 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 22:37:33,968 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:37:33,974 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@78b15bc0 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.6611305025242 4.351508, 50.6611305025242 5.810298497475798, 52.119921 5.810298497475798, 52.119921 4.351508, 50.6611305025242 4.351508)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.6611305025242 4.351508, 50.6611305025242 5.810298497475798, 52.119921 5.810298497475798, 52.119921 4.351508, 50.6611305025242 4.351508)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.6611305025242 4.351508, 50.6611305025242 5.810298497475798, 52.119921 5.810298497475798, 52.119921 4.351508, 50.6611305025242 4.351508)) ]
2018-02-13 22:42:32,744 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:42:32,744 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 22:42:33,916 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:42:33,920 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1769f81b (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.64701882989553 5.479468255893573, 50.64701882989553 6.942738913033567, 52.11028948703552 6.942738913033567, 52.11028948703552 5.479468255893573, 50.64701882989553 5.479468255893573)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.64701882989553 5.479468255893573, 50.64701882989553 6.942738913033567, 52.11028948703552 6.942738913033567, 52.11028948703552 5.479468255893573, 50.64701882989553 5.479468255893573)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.64701882989553 5.479468255893573, 50.64701882989553 6.942738913033567, 52.11028948703552 6.942738913033567, 52.11028948703552 5.479468255893573, 50.64701882989553 5.479468255893573)) ]
2018-02-13 22:42:39,753 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:42:39,753 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 22:46:27,299 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 22:46:27,311 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 22:47:34,158 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:47:34,160 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1a875fef (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((51.735208918842005 4.522819595113471, 51.735208918842005 4.522830612938747, 51.735219936667285 4.522830612938747, 51.735219936667285 4.522819595113471, 51.735208918842005 4.522819595113471)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((51.735208918842005 4.522819595113471, 51.735208918842005 4.522830612938747, 51.735219936667285 4.522830612938747, 51.735219936667285 4.522819595113471, 51.735208918842005 4.522819595113471)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((51.735208918842005 4.522819595113471, 51.735208918842005 4.522830612938747, 51.735219936667285 4.522830612938747, 51.735219936667285 4.522819595113471, 51.735208918842005 4.522819595113471)) ]
2018-02-13 22:52:33,778 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:52:33,784 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1a97e157 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.663233174492234 5.62401926725855, 50.663233174492234 7.080707092766318, 52.119921 7.080707092766318, 52.119921 5.62401926725855, 50.663233174492234 5.62401926725855)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.663233174492234 5.62401926725855, 50.663233174492234 7.080707092766318, 52.119921 7.080707092766318, 52.119921 5.62401926725855, 50.663233174492234 5.62401926725855)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.663233174492234 5.62401926725855, 50.663233174492234 7.080707092766318, 52.119921 7.080707092766318, 52.119921 5.62401926725855, 50.663233174492234 5.62401926725855)) ]
2018-02-13 22:54:03,807 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 22:54:03,822 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 22:56:47,768 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:56:47,768 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 22:56:54,768 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:56:54,768 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 22:57:34,256 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 22:57:34,259 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1e2b3597 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.647472506208494 6.931300660913575, 50.647472506208494 8.381952072649481, 52.0981239179444 8.381952072649481, 52.0981239179444 6.931300660913575, 50.647472506208494 6.931300660913575)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.647472506208494 6.931300660913575, 50.647472506208494 8.381952072649481, 52.0981239179444 8.381952072649481, 52.0981239179444 6.931300660913575, 50.647472506208494 6.931300660913575)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.647472506208494 6.931300660913575, 50.647472506208494 8.381952072649481, 52.0981239179444 8.381952072649481, 52.0981239179444 6.931300660913575, 50.647472506208494 6.931300660913575)) ]
2018-02-13 23:02:34,427 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:02:34,433 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@61893863 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.664472524106166 4.5559204378327705, 50.664472524106166 6.009427465983958, 52.11797955225735 6.009427465983958, 52.11797955225735 4.5559204378327705, 50.664472524106166 4.5559204378327705)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.664472524106166 4.5559204378327705, 50.664472524106166 6.009427465983958, 52.11797955225735 6.009427465983958, 52.11797955225735 4.5559204378327705, 50.664472524106166 4.5559204378327705)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.664472524106166 4.5559204378327705, 50.664472524106166 6.009427465983958, 52.11797955225735 6.009427465983958, 52.11797955225735 4.5559204378327705, 50.664472524106166 4.5559204378327705)) ]
2018-02-13 23:04:03,819 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 23:04:03,849 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 23:07:34,625 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:07:34,631 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5e3b985 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.713400881243714 4.8908205580354185, 50.713400881243714 6.297340675339812, 52.11992099854811 6.297340675339812, 52.11992099854811 4.8908205580354185, 50.713400881243714 4.8908205580354185)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.713400881243714 4.8908205580354185, 50.713400881243714 6.297340675339812, 52.11992099854811 6.297340675339812, 52.11992099854811 4.8908205580354185, 50.713400881243714 4.8908205580354185)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.713400881243714 4.8908205580354185, 50.713400881243714 6.297340675339812, 52.11992099854811 6.297340675339812, 52.11992099854811 4.8908205580354185, 50.713400881243714 4.8908205580354185)) ]
2018-02-13 23:11:02,768 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:11:02,768 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:11:09,781 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:11:09,781 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:12:34,408 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:12:34,415 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@475323e7 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.65920538542955 5.758945824770849, 50.65920538542955 7.219661439341298, 52.119921 7.219661439341298, 52.119921 5.758945824770849, 50.65920538542955 5.758945824770849)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.65920538542955 5.758945824770849, 50.65920538542955 7.219661439341298, 52.119921 7.219661439341298, 52.119921 5.758945824770849, 50.65920538542955 5.758945824770849)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.65920538542955 5.758945824770849, 50.65920538542955 7.219661439341298, 52.119921 7.219661439341298, 52.119921 5.758945824770849, 50.65920538542955 5.758945824770849)) ]
2018-02-13 23:14:03,576 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 23:14:03,591 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 23:17:34,555 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:17:34,558 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@56c2cc73 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.5295474972244 8.76763353714323, 50.5295474972244 10.233433504437883, 51.99534746451906 10.233433504437883, 51.99534746451906 8.76763353714323, 50.5295474972244 8.76763353714323)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.5295474972244 8.76763353714323, 50.5295474972244 10.233433504437883, 51.99534746451906 10.233433504437883, 51.99534746451906 8.76763353714323, 50.5295474972244 8.76763353714323)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.5295474972244 8.76763353714323, 50.5295474972244 10.233433504437883, 51.99534746451906 10.233433504437883, 51.99534746451906 8.76763353714323, 50.5295474972244 8.76763353714323)) ]
2018-02-13 23:22:35,173 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:22:35,180 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@5247ae2f (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.66931205199846 4.351508, 50.66931205199846 5.802116948001538, 52.119921 5.802116948001538, 52.119921 4.351508, 50.66931205199846 4.351508)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.66931205199846 4.351508, 50.66931205199846 5.802116948001538, 52.119921 5.802116948001538, 52.119921 4.351508, 50.66931205199846 4.351508)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.66931205199846 4.351508, 50.66931205199846 5.802116948001538, 52.119921 5.802116948001538, 52.119921 4.351508, 50.66931205199846 4.351508)) ]
2018-02-13 23:24:03,397 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 23:24:03,410 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 23:25:17,753 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:25:17,754 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:25:24,753 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:25:24,754 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:27:35,171 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:27:35,176 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@42579077 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.72500338952385 5.4587686400312165, 50.72500338952385 6.853686250507368, 52.119921 6.853686250507368, 52.119921 5.4587686400312165, 50.72500338952385 5.4587686400312165)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.72500338952385 5.4587686400312165, 50.72500338952385 6.853686250507368, 52.119921 6.853686250507368, 52.119921 5.4587686400312165, 50.72500338952385 5.4587686400312165)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.72500338952385 5.4587686400312165, 50.72500338952385 6.853686250507368, 52.119921 6.853686250507368, 52.119921 5.4587686400312165, 50.72500338952385 5.4587686400312165)) ]
2018-02-13 23:31:00,740 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 23:31:00,752 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 23:32:35,243 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:32:35,249 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@477f105d (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.644305464038204 5.704694846279235, 50.644305464038204 7.160756702624315, 52.100367320383285 7.160756702624315, 52.100367320383285 5.704694846279235, 50.644305464038204 5.704694846279235)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.644305464038204 5.704694846279235, 50.644305464038204 7.160756702624315, 52.100367320383285 7.160756702624315, 52.100367320383285 5.704694846279235, 50.644305464038204 5.704694846279235)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.644305464038204 5.704694846279235, 50.644305464038204 7.160756702624315, 52.100367320383285 7.160756702624315, 52.100367320383285 5.704694846279235, 50.644305464038204 5.704694846279235)) ]
2018-02-13 23:34:11,170 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 23:34:11,185 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 23:37:34,961 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:37:34,970 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@70a1093e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.66659526487842 4.929787944161246, 50.66659526487842 6.383113679282825, 52.119921 6.383113679282825, 52.119921 4.929787944161246, 50.66659526487842 4.929787944161246)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.66659526487842 4.929787944161246, 50.66659526487842 6.383113679282825, 52.119921 6.383113679282825, 52.119921 4.929787944161246, 50.66659526487842 4.929787944161246)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.66659526487842 4.929787944161246, 50.66659526487842 6.383113679282825, 52.119921 6.383113679282825, 52.119921 4.929787944161246, 50.66659526487842 4.929787944161246)) ]
2018-02-13 23:39:32,826 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:39:32,826 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:39:39,755 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:39:39,755 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:42:35,556 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:42:35,562 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@75cad2e8 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.24293789214459 4.351508, 50.24293789214459 5.802852946045425, 51.69428283819001 5.802852946045425, 51.69428283819001 4.351508, 50.24293789214459 4.351508)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.24293789214459 4.351508, 50.24293789214459 5.802852946045425, 51.69428283819001 5.802852946045425, 51.69428283819001 4.351508, 50.24293789214459 4.351508)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.24293789214459 4.351508, 50.24293789214459 5.802852946045425, 51.69428283819001 5.802852946045425, 51.69428283819001 4.351508, 50.24293789214459 4.351508)) ]
2018-02-13 23:44:11,189 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 23:44:11,204 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 23:47:35,471 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:47:35,477 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@4b23e511 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.66664441096767 5.4614423606047, 50.66664441096767 6.914718238285649, 52.11992028864862 6.914718238285649, 52.11992028864862 5.4614423606047, 50.66664441096767 5.4614423606047)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.66664441096767 5.4614423606047, 50.66664441096767 6.914718238285649, 52.11992028864862 6.914718238285649, 52.11992028864862 5.4614423606047, 50.66664441096767 5.4614423606047)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.66664441096767 5.4614423606047, 50.66664441096767 6.914718238285649, 52.11992028864862 6.914718238285649, 52.11992028864862 5.4614423606047, 50.66664441096767 5.4614423606047)) ]
2018-02-13 23:52:35,146 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:52:35,150 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@773ebfb9 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((50.0396918837589 4.351508, 50.0396918837589 5.810298497475798, 51.498482381234695 5.810298497475798, 51.498482381234695 4.351508, 50.0396918837589 4.351508)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((50.0396918837589 4.351508, 50.0396918837589 5.810298497475798, 51.498482381234695 5.810298497475798, 51.498482381234695 4.351508, 50.0396918837589 4.351508)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((50.0396918837589 4.351508, 50.0396918837589 5.810298497475798, 51.498482381234695 5.810298497475798, 51.498482381234695 4.351508, 50.0396918837589 4.351508)) ]
2018-02-13 23:53:47,760 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:53:47,760 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:53:54,765 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:53:54,766 INFO [geoserver.wfs] - 
Request: getCapabilities
    acceptVersions:
        version[0] = 1.1.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    service = WFS
2018-02-13 23:54:11,218 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-13 23:54:11,233 INFO [geoserver.wms] - 
Request: getMap
	FeatureVersion = null
	SRS = EPSG:28992
	Styles = [StyleImpl[ name=stations]]
	Tiled = false
	Palette = null
	Filters = null
	TilesOrigin = null
	Width = 1392
	Height = 1417
	StyleFormat = sld
	Elevation = []
	Bbox = SRSEnvelope[177686.76 : 196395.24, 418374.4 : 437425.6]
	ViewParams = null
	Angle = 0.0
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StartIndex = null
	RemoteOwsType = null
	RemoteOwsURL = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	CQLFilter = null
	FeatureId = null
	FormatOptions = {}
	Interpolations = []
	Env = {}
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	MaxFeatures = null
	Exceptions = SE_XML
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	Get = false
	BaseUrl = http://data.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=177686.76,418374.4,196395.24,437425.6, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1392, HEIGHT=1417, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-13 23:57:35,316 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-13 23:57:35,318 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://data.smartemission.nl:80/geoserver/
    count = 3
    outputFormat = text/xml; subtype=gml/3.2
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@39f89412 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: [  bbox POLYGON ((51.4225597762924 7.432562694851786, 51.4225597762924 8.11236484060801, 52.10236192204863 8.11236484060801, 52.10236192204863 7.432562694851786, 51.4225597762924 7.432562694851786)) ], abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}cur_measurements_barometer]) (featureVersion: null, srsName: urn:ogc:def:crs:EPSG::4326, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        abstractSelectionClause = [  bbox POLYGON ((51.4225597762924 7.432562694851786, 51.4225597762924 8.11236484060801, 52.10236192204863 8.11236484060801, 52.10236192204863 7.432562694851786, 51.4225597762924 7.432562694851786)) ]
        typeNames[0] = {http://smartem.geonovum.nl}cur_measurements_barometer
        srsName = urn:ogc:def:crs:EPSG::4326
        filter = [  bbox POLYGON ((51.4225597762924 7.432562694851786, 51.4225597762924 8.11236484060801, 52.10236192204863 8.11236484060801, 52.10236192204863 7.432562694851786, 51.4225597762924 7.432562694851786)) ]
2018-02-15 13:59:52,909 INFO [org.geoserver] - Loaded style 'dem'
2018-02-15 13:59:52,920 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-15 13:59:52,929 INFO [org.geoserver] - Loaded style 'pophatch'
2018-02-15 13:59:52,931 INFO [org.geoserver] - Loaded style 'green'
2018-02-15 13:59:52,941 INFO [org.geoserver] - Loaded style 'rain'
2018-02-15 13:59:52,953 INFO [org.geoserver] - Loaded style 'stations-inactive'
2018-02-15 13:59:52,956 INFO [org.geoserver] - Loaded style 'burg'
2018-02-15 13:59:52,964 INFO [org.geoserver] - Loaded style 'stations-active'
2018-02-15 13:59:52,966 INFO [org.geoserver] - Loaded style 'poi'
2018-02-15 13:59:52,970 INFO [org.geoserver] - Loaded style 'stations'
2018-02-15 13:59:52,977 INFO [org.geoserver] - Loaded style 'line'
2018-02-15 13:59:52,985 INFO [org.geoserver] - Loaded style 'cite_lakes'
2018-02-15 13:59:52,987 INFO [org.geoserver] - Loaded style 'tiger_roads'
2018-02-15 13:59:52,999 INFO [org.geoserver] - Loaded style 'population'
2018-02-15 13:59:53,009 INFO [org.geoserver] - Loaded style 'restricted'
2018-02-15 13:59:53,025 INFO [org.geoserver] - Loaded style 'capitals'
2018-02-15 13:59:53,028 INFO [org.geoserver] - Loaded style 'generic'
2018-02-15 13:59:53,030 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2018-02-15 13:59:53,032 INFO [org.geoserver] - Loaded style 'giant_polygon'
2018-02-15 13:59:53,038 INFO [org.geoserver] - Loaded style 'raster'
2018-02-15 13:59:53,040 INFO [org.geoserver] - Loaded style 'simple_streams'
2018-02-15 13:59:53,041 INFO [org.geoserver] - Loaded style 'meteo'
2018-02-15 13:59:53,043 INFO [org.geoserver] - Loaded style 'grass'
2018-02-15 13:59:53,044 INFO [org.geoserver] - Loaded style 'point'
2018-02-15 13:59:53,048 INFO [org.geoserver] - Loaded style 'simple_roads'
2018-02-15 13:59:53,058 INFO [org.geoserver] - Loaded style 'polygon'
2018-02-15 13:59:53,061 INFO [org.geoserver] - Loaded default workspace smartem
2018-02-15 13:59:53,080 INFO [org.geoserver] - Loaded workspace 'smartem'
2018-02-15 13:59:53,106 INFO [org.geoserver] - Loaded style 'meas_pm25_color_range'
2018-02-15 13:59:53,113 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-15 13:59:53,122 INFO [org.geoserver] - Loaded style 'meas_co2_color_range'
2018-02-15 13:59:53,125 INFO [org.geoserver] - Loaded style 'meas_pm10_color_range'
2018-02-15 13:59:53,126 INFO [org.geoserver] - Loaded style 'meas_kohm_raw'
2018-02-15 13:59:53,141 INFO [org.geoserver] - Loaded style 'meas_o3_color_range'
2018-02-15 13:59:53,147 INFO [org.geoserver] - Loaded style 'meas_co_plain'
2018-02-15 13:59:53,149 INFO [org.geoserver] - Loaded style 'meas_no2_color_range'
2018-02-15 13:59:54,285 INFO [org.geoserver] - Loaded store 'pg_smartem_refined', enabled
2018-02-15 13:59:54,303 INFO [org.geoserver] - Loaded data store 'pg_smartem_refined'
2018-02-15 13:59:57,869 INFO [org.geoserver] - Loaded feature type 'timeseries_o3_raw', enabled
2018-02-15 13:59:57,891 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:57,942 INFO [org.geoserver] - Loaded layer 'timeseries_o3_raw'
2018-02-15 13:59:57,956 INFO [org.geoserver] - Loaded feature type 'timeseries_co', enabled
2018-02-15 13:59:58,055 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,060 INFO [org.geoserver] - Loaded layer 'timeseries_co'
2018-02-15 13:59:58,082 INFO [org.geoserver] - Loaded feature type 'timeseries_co_raw', enabled
2018-02-15 13:59:58,084 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,097 INFO [org.geoserver] - Loaded layer 'timeseries_co_raw'
2018-02-15 13:59:58,108 INFO [org.geoserver] - Loaded feature type 'timeseries_stations', enabled
2018-02-15 13:59:58,112 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,117 INFO [org.geoserver] - Loaded layer 'timeseries_stations'
2018-02-15 13:59:58,141 INFO [org.geoserver] - Loaded feature type 'timeseries_no2_raw', enabled
2018-02-15 13:59:58,142 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,152 INFO [org.geoserver] - Loaded layer 'timeseries_no2_raw'
2018-02-15 13:59:58,175 INFO [org.geoserver] - Loaded feature type 'timeseries_noise_level_avg', enabled
2018-02-15 13:59:58,180 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,183 INFO [org.geoserver] - Loaded layer 'timeseries_noise_level_avg'
2018-02-15 13:59:58,200 INFO [org.geoserver] - Loaded feature type 'timeseries_no2', enabled
2018-02-15 13:59:58,204 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,207 INFO [org.geoserver] - Loaded layer 'timeseries_no2'
2018-02-15 13:59:58,255 INFO [org.geoserver] - Loaded feature type 'timeseries_temperature', enabled
2018-02-15 13:59:58,256 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,265 INFO [org.geoserver] - Loaded layer 'timeseries_temperature'
2018-02-15 13:59:58,280 INFO [org.geoserver] - Loaded feature type 'timeseries', enabled
2018-02-15 13:59:58,280 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,288 INFO [org.geoserver] - Loaded layer 'timeseries'
2018-02-15 13:59:58,299 INFO [org.geoserver] - Loaded feature type 'timeseries_barometer', enabled
2018-02-15 13:59:58,307 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,325 INFO [org.geoserver] - Loaded layer 'timeseries_barometer'
2018-02-15 13:59:58,342 INFO [org.geoserver] - Loaded feature type 'timeseries_humidity', enabled
2018-02-15 13:59:58,372 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,376 INFO [org.geoserver] - Loaded layer 'timeseries_humidity'
2018-02-15 13:59:58,385 INFO [org.geoserver] - Loaded feature type 'timeseries_co2', enabled
2018-02-15 13:59:58,386 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,388 INFO [org.geoserver] - Loaded layer 'timeseries_co2'
2018-02-15 13:59:58,396 INFO [org.geoserver] - Loaded feature type 'timeseries_pm25', enabled
2018-02-15 13:59:58,397 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,399 INFO [org.geoserver] - Loaded layer 'timeseries_pm25'
2018-02-15 13:59:58,407 INFO [org.geoserver] - Loaded feature type 'timeseries_pm10', enabled
2018-02-15 13:59:58,408 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,410 INFO [org.geoserver] - Loaded layer 'timeseries_pm10'
2018-02-15 13:59:58,440 INFO [org.geoserver] - Loaded feature type 'timeseries_o3', enabled
2018-02-15 13:59:58,441 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-15 13:59:58,454 INFO [org.geoserver] - Loaded layer 'timeseries_o3'
2018-02-15 13:59:58,487 INFO [org.geoserver] - Loaded store 'pg_smartem_rt', enabled
2018-02-15 13:59:58,488 INFO [org.geoserver] - Loaded data store 'pg_smartem_rt'
2018-02-15 13:59:58,571 INFO [org.geoserver] - Loaded feature type 'last_measurements_temperature', enabled
2018-02-15 13:59:58,576 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,589 INFO [org.geoserver] - Loaded layer 'last_measurements_temperature'
2018-02-15 13:59:58,610 INFO [org.geoserver] - Loaded feature type 'cur_measurements_no2', enabled
2018-02-15 13:59:58,610 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,629 INFO [org.geoserver] - Loaded layer 'cur_measurements_no2'
2018-02-15 13:59:58,640 INFO [org.geoserver] - Loaded feature type 'last_measurements_humidity', enabled
2018-02-15 13:59:58,643 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,647 INFO [org.geoserver] - Loaded layer 'last_measurements_humidity'
2018-02-15 13:59:58,666 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2_raw', enabled
2018-02-15 13:59:58,667 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,669 INFO [org.geoserver] - Loaded layer 'last_measurements_no2_raw'
2018-02-15 13:59:58,701 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3_raw', enabled
2018-02-15 13:59:58,724 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,729 INFO [org.geoserver] - Loaded layer 'last_measurements_o3_raw'
2018-02-15 13:59:58,741 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm10', enabled
2018-02-15 13:59:58,742 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,744 INFO [org.geoserver] - Loaded layer 'last_measurements_pm10'
2018-02-15 13:59:58,760 INFO [org.geoserver] - Loaded feature type 'last_measurements_co', enabled
2018-02-15 13:59:58,760 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,762 INFO [org.geoserver] - Loaded layer 'last_measurements_co'
2018-02-15 13:59:58,777 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2', enabled
2018-02-15 13:59:58,778 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,781 INFO [org.geoserver] - Loaded layer 'last_measurements_no2'
2018-02-15 13:59:58,801 INFO [org.geoserver] - Loaded feature type 'stations', enabled
2018-02-15 13:59:58,813 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,817 INFO [org.geoserver] - Loaded layer 'stations'
2018-02-15 13:59:58,822 INFO [org.geoserver] - Loaded feature type 'last_measurements_noise_level_avg', enabled
2018-02-15 13:59:58,826 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,829 INFO [org.geoserver] - Loaded layer 'last_measurements_noise_level_avg'
2018-02-15 13:59:58,833 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm25', enabled
2018-02-15 13:59:58,837 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,840 INFO [org.geoserver] - Loaded layer 'last_measurements_pm25'
2018-02-15 13:59:58,848 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm10', enabled
2018-02-15 13:59:58,848 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,851 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm10'
2018-02-15 13:59:58,860 INFO [org.geoserver] - Loaded feature type 'cur_measurements_o3', enabled
2018-02-15 13:59:58,860 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,862 INFO [org.geoserver] - Loaded layer 'cur_measurements_o3'
2018-02-15 13:59:58,869 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3', enabled
2018-02-15 13:59:58,871 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,880 INFO [org.geoserver] - Loaded layer 'last_measurements_o3'
2018-02-15 13:59:58,894 INFO [org.geoserver] - Loaded feature type 'last_measurements_barometer', enabled
2018-02-15 13:59:58,894 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,896 INFO [org.geoserver] - Loaded layer 'last_measurements_barometer'
2018-02-15 13:59:58,907 INFO [org.geoserver] - Loaded feature type 'cur_measurements_barometer', enabled
2018-02-15 13:59:58,907 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,910 INFO [org.geoserver] - Loaded layer 'cur_measurements_barometer'
2018-02-15 13:59:58,918 INFO [org.geoserver] - Loaded feature type 'cur_measurements_noise_level_avg', enabled
2018-02-15 13:59:58,919 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,921 INFO [org.geoserver] - Loaded layer 'cur_measurements_noise_level_avg'
2018-02-15 13:59:58,924 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co2', enabled
2018-02-15 13:59:58,930 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,933 INFO [org.geoserver] - Loaded layer 'cur_measurements_co2'
2018-02-15 13:59:58,940 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm25', enabled
2018-02-15 13:59:58,941 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,942 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm25'
2018-02-15 13:59:58,947 INFO [org.geoserver] - Loaded feature type 'last_measurements_co_raw', enabled
2018-02-15 13:59:58,948 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,958 INFO [org.geoserver] - Loaded layer 'last_measurements_co_raw'
2018-02-15 13:59:58,965 INFO [org.geoserver] - Loaded feature type 'cur_measurements_temperature', enabled
2018-02-15 13:59:58,967 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,969 INFO [org.geoserver] - Loaded layer 'cur_measurements_temperature'
2018-02-15 13:59:58,987 INFO [org.geoserver] - Loaded feature type 'last_measurements_co2', enabled
2018-02-15 13:59:58,991 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:58,993 INFO [org.geoserver] - Loaded layer 'last_measurements_co2'
2018-02-15 13:59:58,997 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co', enabled
2018-02-15 13:59:58,998 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:59,006 INFO [org.geoserver] - Loaded layer 'cur_measurements_co'
2018-02-15 13:59:59,017 INFO [org.geoserver] - Loaded feature type 'cur_measurements_humidity', enabled
2018-02-15 13:59:59,018 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-15 13:59:59,037 INFO [org.geoserver] - Loaded layer 'cur_measurements_humidity'
2018-02-15 13:59:59,322 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-15 13:59:59,355 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-15 13:59:59,355 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-15 13:59:59,356 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-15 13:59:59,586 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-15 13:59:59,586 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2018-02-15 13:59:59,586 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2018-02-15 13:59:59,586 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-15 13:59:59,987 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2018-02-15 13:59:59,988 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2018-02-15 13:59:59,994 INFO [gwc.layer] - Loading tile layers from gwc-layers
2018-02-15 14:00:00,084 INFO [gwc.layer] - GWC configuration based on GeoServer's Catalog loaded successfuly
2018-02-15 14:00:00,084 INFO [layer.TileLayerDispatcher] - Configuration GeoServer Catalog Configuration contained no layers.
2018-02-15 14:00:00,085 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2018-02-15 14:00:00,086 INFO [config.XMLConfiguration] - Initializing layers from gwc
2018-02-15 14:00:00,090 INFO [layer.TileLayerDispatcher] - Configuration gwc contained no layers.
2018-02-15 14:00:00,177 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-15 14:00:00,177 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to /opt/geoserver/data_dir, using it as the default prefix. ***
2018-02-15 14:00:00,178 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-15 14:00:00,602 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-15 14:00:00,644 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-15 14:00:00,657 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-15 14:00:00,660 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2018-02-15 14:00:00,664 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2018-02-15 14:00:00,668 INFO [diskquota.DiskQuotaMonitor] - 0 layers attached to global quota 500.0 MB
2018-02-15 14:00:00,694 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2018-02-15 14:00:01,728 INFO [org.geoserver] - Loaded service 'wms', enabled
2018-02-15 14:00:01,777 INFO [org.geoserver] - Loaded service 'wcs', enabled
2018-02-15 14:00:01,877 INFO [org.geoserver] - Loaded service 'wfs', enabled
2018-02-15 14:00:01,954 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2018-02-15 14:00:06,292 INFO [ows.OWSHandlerMapping] - Mapped URL path [/gwc/service/**] onto handler 'dispatcher'
2018-02-15 14:00:06,384 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2018-02-15 14:00:06,490 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2018-02-15 14:00:06,690 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2018-02-15 14:00:07,764 INFO [rest.RESTDispatcher] - Created RESTDispatcher with 15 paths
2018-02-15 14:00:08,073 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2018-02-15 14:00:08,073 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2018-02-15 14:00:08,590 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-15 14:00:11,369 INFO [org.geoserver] - GeoServer configuration lock is enabled
2018-02-15 14:00:13,487 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms] onto handler 'dispatcher'
2018-02-15 14:00:13,487 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms/*] onto handler 'dispatcher'
2018-02-15 14:00:13,739 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate/*] onto handler 'dispatcher'
2018-02-15 14:00:13,740 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate] onto handler 'dispatcher'
2018-02-15 14:00:14,150 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows/**] onto handler 'dispatcher'
2018-02-15 14:00:14,150 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows] onto handler 'dispatcher'
2018-02-15 14:00:14,178 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs] onto handler 'dispatcher'
2018-02-15 14:00:14,178 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs/**] onto handler 'dispatcher'
2018-02-15 14:00:22,492 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml] onto handler 'dispatcher'
2018-02-15 14:00:22,492 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/*] onto handler 'dispatcher'
2018-02-15 14:00:22,492 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/icon/**/*] onto handler 'kmlIconService'
2018-02-15 14:00:23,209 INFO [ows.OWSHandlerMapping] - Mapped URL path [/TestWfsPost] onto handler 'wfsTestServlet'
2018-02-15 14:00:23,209 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs/*] onto handler 'dispatcher'
2018-02-15 14:00:23,209 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs] onto handler 'dispatcher'
2018-02-15 14:00:42,258 INFO [geoserver.security] - Start reloading user/groups for service named default
2018-02-15 14:00:42,280 INFO [geoserver.security] - Reloading user/groups successful for service named default
2018-02-15 14:00:43,170 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2018-02-15 14:00:43,170 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2018-02-15 14:00:54,385 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:00:54,386 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-15 14:00:54,395 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:03,896 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:01:04,137 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://pdokt.smartemission.nl:80/geoserver/
    outputFormat = JSON
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@1c166694 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}timeseries_stations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {http://smartem.geonovum.nl}timeseries_stations
2018-02-15 14:01:04,348 INFO [wfs.json] - about to encode JSON
2018-02-15 14:01:05,346 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:01:10,286 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:10,308 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:10,366 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_co identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_co, name=http://smartem.geonovum.nl:cur_measurements_co styleName=null, title=cur_measurements_co, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_co_plain, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_co, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:01:10,687 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d8868895]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_co_plain, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_co}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:01:12,642 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:12,685 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:timeseries_co identified extends Feature(device_id:device_id,device_meta:device_meta,sensor_meta:sensor_meta,name:name,label:label,unit:unit,value:value,value_raw:value_raw,value_min:value_min,value_max:value_max,time:time,day:day,hour:hour,sample_count:sample_count,point:point,gid:gid,gid_raw:gid_raw)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:timeseries_co, name=http://smartem.geonovum.nl:timeseries_co styleName=null, title=timeseries_co, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_co_plain, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:timeseries_co, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:01:12,692 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:12,889 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@85fd4c03]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_co_plain, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = [Thu Feb 15 13:00:00 CET 2018]
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2018-02-15T12:00:00.000Z, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_co}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:01:15,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:15,472 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:15,977 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:01:16,120 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:01:57,434 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:57,448 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:01:57,737 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_noise_level_avg identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_noise_level_avg, name=http://smartem.geonovum.nl:cur_measurements_noise_level_avg styleName=null, title=cur_measurements_noise_level_avg, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_noise_level_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_noise_level_avg, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:01:58,285 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@e937418f]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_noise_level_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_noise_level_avg}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:02:03,739 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:03,757 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:03,796 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:timeseries_noise_level_avg identified extends Feature(device_id:device_id,device_meta:device_meta,sensor_meta:sensor_meta,name:name,label:label,unit:unit,value:value,value_raw:value_raw,value_min:value_min,value_max:value_max,time:time,day:day,hour:hour,sample_count:sample_count,point:point,gid:gid,gid_raw:gid_raw)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:timeseries_noise_level_avg, name=http://smartem.geonovum.nl:timeseries_noise_level_avg styleName=null, title=timeseries_noise_level_avg, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_noise_level_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:timeseries_noise_level_avg, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:02:03,882 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@496200e1]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_noise_level_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = [Thu Feb 15 13:00:00 CET 2018]
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2018-02-15T12:00:00.000Z, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_noise_level_avg}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:02:07,231 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:07,250 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:07,534 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_temperature identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_temperature, name=http://smartem.geonovum.nl:cur_measurements_temperature styleName=null, title=cur_measurements_temperature, legendInfo=null]]
	Styles = [StyleImpl[ name=meteo, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_temperature, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:02:07,790 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@52ef210d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meteo, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_temperature}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:02:12,126 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:12,138 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:12,251 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_barometer identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_barometer, name=http://smartem.geonovum.nl:cur_measurements_barometer styleName=null, title=cur_measurements_barometer, legendInfo=null]]
	Styles = [StyleImpl[ name=meteo, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_barometer, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:02:12,723 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@a82e1754]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meteo, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_barometer}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:02:14,827 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:14,839 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_humidity identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_humidity, name=http://smartem.geonovum.nl:cur_measurements_humidity styleName=null, title=cur_measurements_humidity, legendInfo=null]]
	Styles = [StyleImpl[ name=meteo, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_humidity, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:02:14,833 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:15,242 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@f4c0912e]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meteo, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_humidity}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:02:24,992 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:25,011 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:02:25,142 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_no2 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_no2, name=http://smartem.geonovum.nl:cur_measurements_no2 styleName=null, title=cur_measurements_no2, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_no2, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:02:25,286 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@384f1f90]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-147400.32 : 447400.32, 291625.6 : 688374.4]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1383
	Height = 922
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-147400.32,291625.6,447400.32,688374.4, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1383, HEIGHT=922, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_no2}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:22,693 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:22,704 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:22,721 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-15 14:13:22,747 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:23,136 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[31943.04 : 268056.96, 329365.12 : 650634.88]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 549
	Height = 747
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=31943.04,329365.12,268056.96,650634.88, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=549, HEIGHT=747, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:24,224 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://pdokt.smartemission.nl:80/geoserver/
    outputFormat = JSON
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@6f2efb8e (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}timeseries_stations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {http://smartem.geonovum.nl}timeseries_stations
2018-02-15 14:13:24,225 INFO [wfs.json] - about to encode JSON
2018-02-15 14:13:32,160 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:32,285 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-22247.04 : 322247.04, 324204.16 : 655795.84]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-22247.04,324204.16,322247.04,655795.84, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:35,442 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:35,468 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:35,566 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_no2 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_no2, name=http://smartem.geonovum.nl:cur_measurements_no2 styleName=null, title=cur_measurements_no2, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_no2, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:35,722 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@384f1f90]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-22247.04 : 322247.04, 324204.16 : 655795.84]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-22247.04,324204.16,322247.04,655795.84, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_no2}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:40,543 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:40,550 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:40,619 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@384f1f90]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[3987.84 : 348481.92, 261842.56 : 593434.24]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=3987.84,261842.56,348481.92,593434.24, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_no2}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:40,742 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[3987.84 : 348481.92, 261842.56 : 593434.24]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=3987.84,261842.56,348481.92,593434.24, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:41,187 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:41,207 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:41,219 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 768000.4147199998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=768000.4147199998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:41,242 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:41,244 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 384000.2073599999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=384000.2073599999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:41,246 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:41,275 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:41,293 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:41,328 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_no2 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_no2, name=http://smartem.geonovum.nl:cur_measurements_no2 styleName=null, title=cur_measurements_no2, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 768000.4147199998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=768000.4147199998, LAYER=smartem:cur_measurements_no2, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:41,422 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_no2 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_no2, name=http://smartem.geonovum.nl:cur_measurements_no2 styleName=null, title=cur_measurements_no2, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 384000.2073599999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=384000.2073599999, LAYER=smartem:cur_measurements_no2, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:41,573 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@384f1f90]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[118335.36 : 204458.88, 388769.92 : 471667.84]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=118335.36,388769.92,204458.88,471667.84, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_no2}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:41,669 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[118335.36 : 204458.88, 388769.92 : 471667.84]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=118335.36,388769.92,204458.88,471667.84, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:46,660 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:46,664 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:46,691 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 192000.10367999994
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=192000.10367999994, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:46,704 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:46,710 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:46,718 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:46,731 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 96000.05183999997
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=96000.05183999997, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:46,791 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:46,796 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_no2 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_no2, name=http://smartem.geonovum.nl:cur_measurements_no2 styleName=null, title=cur_measurements_no2, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 192000.10367999994
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=192000.10367999994, LAYER=smartem:cur_measurements_no2, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:46,881 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_no2 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_no2, name=http://smartem.geonovum.nl:cur_measurements_no2 styleName=null, title=cur_measurements_no2, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 96000.05183999997
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=96000.05183999997, LAYER=smartem:cur_measurements_no2, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:13:47,010 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@384f1f90]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[171813.12 : 193344.0, 417571.84 : 438296.32]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=171813.12,417571.84,193344,438296.32, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_no2}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:47,039 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[171813.12 : 193344.0, 417571.84 : 438296.32]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=171813.12,417571.84,193344,438296.32, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:48,857 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:48,881 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:13:49,028 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@384f1f90]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[176275.2 : 197806.08, 416899.84 : 437624.32]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=176275.2,416899.84,197806.08,437624.32, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_no2}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:13:49,263 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[176275.2 : 197806.08, 416899.84 : 437624.32]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 801
	Height = 771
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=176275.2,416899.84,197806.08,437624.32, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=801, HEIGHT=771, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:18:24,370 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:18:24,373 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:18:24,420 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:18:24,474 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-15 14:18:24,733 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-247716.48 : 547716.48, 237435.52 : 742564.48]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-247716.48,237435.52,547716.48,742564.48, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:18:26,039 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://pdokt.smartemission.nl:80/geoserver/
    outputFormat = JSON
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@18c82c97 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}timeseries_stations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {http://smartem.geonovum.nl}timeseries_stations
2018-02-15 14:18:26,045 INFO [wfs.json] - about to encode JSON
2018-02-15 14:21:16,364 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:16,371 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:16,419 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:16,429 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-15 14:21:16,721 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-247716.48 : 547716.48, 237435.52 : 742564.48]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-247716.48,237435.52,547716.48,742564.48, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:18,313 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://pdokt.smartemission.nl:80/geoserver/
    outputFormat = JSON
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@2393d731 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}timeseries_stations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {http://smartem.geonovum.nl}timeseries_stations
2018-02-15 14:21:18,315 INFO [wfs.json] - about to encode JSON
2018-02-15 14:21:18,508 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:18,511 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 768000.4147199998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=768000.4147199998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:18,527 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:18,646 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-48858.24 : 348858.24, 363717.76 : 616282.24]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-48858.24,363717.76,348858.24,616282.24, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:18,961 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:18,966 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:18,969 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 384000.2073599999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=384000.2073599999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:19,321 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[50570.88 : 249429.12, 426858.88 : 553141.12]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=50570.88,426858.88,249429.12,553141.12, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:19,988 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:20,185 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[39711.36 : 238569.6, 388796.8 : 515079.04]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=39711.36,388796.8,238569.6,515079.04, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:21,380 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:21,386 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 192000.10367999994
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=192000.10367999994, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:21,390 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:21,546 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[89425.92 : 188855.04, 420367.36 : 483508.48]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=89425.92,420367.36,188855.04,483508.48, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:21,676 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:21,677 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:21,680 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 96000.05183999997
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=96000.05183999997, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:21,726 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[114283.2 : 163997.76, 436152.64 : 467723.2]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=114283.2,436152.64,163997.76,467723.2, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:21,842 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:21,846 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:21,850 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 48000.025919999985
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=48000.025919999985, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:21,948 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[126711.84 : 151569.12, 444045.28 : 459830.56]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=126711.84,444045.28,151569.12,459830.56, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:24,391 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:24,396 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 24000.012959999993
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=24000.012959999993, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:24,402 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:24,554 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[130802.64 : 143231.28, 450585.52 : 458478.16]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=130802.64,450585.52,143231.28,458478.16, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:24,610 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:24,612 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 12000.006479999996
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=12000.006479999996, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:24,639 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:24,695 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[133909.8 : 140124.12, 452558.68 : 456505.0]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=133909.8,452558.68,140124.12,456505, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:24,795 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:24,799 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:24,824 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:24,895 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135463.38 : 138570.54, 453545.26 : 455518.42]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=135463.38,453545.26,138570.54,455518.42, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:25,893 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:25,979 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135335.7 : 138442.86, 454296.22 : 456269.38]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=135335.7,454296.22,138442.86,456269.38, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:26,908 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:26,981 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135396.18 : 138503.34, 454961.5 : 456934.66]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=135396.18,454961.5,138503.34,456934.66, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:28,470 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:28,478 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:28,480 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:28,584 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136172.97 : 137726.55, 455454.79 : 456441.37]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136172.97,455454.79,137726.55,456441.37, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:28,688 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:28,691 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:28,732 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:28,792 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136561.365 : 137338.155, 455701.435 : 456194.725]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136561.365,455701.435,137338.155,456194.725, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:28,878 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:28,890 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:28,918 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:29,049 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136755.5625 : 137143.9575, 455824.7575 : 456071.4025]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136755.5625,455824.7575,137143.9575,456071.4025, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:30,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:30,844 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136570.1325 : 136958.5275, 455810.4775 : 456057.1225]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136570.1325,455810.4775,136958.5275,456057.1225, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:33,170 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:33,176 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 375.0002024999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=375.0002024999999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:33,185 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:33,247 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136664.92125 : 136859.11875, 455895.65875 : 456018.98125]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136664.92125,455895.65875,136859.11875,456018.98125, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:37,328 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:37,350 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:37,436 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 375.0002024999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=375.0002024999999, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:37,557 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136645.39125 : 136839.58875, 455915.18875 : 456038.51125]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136645.39125,455915.18875,136839.58875,456038.51125, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:39,615 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,615 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,619 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:39,646 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,646 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,751 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:39,829 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,838 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136548.2925 : 136936.6875, 455853.5275 : 456100.1725]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136548.2925,455853.5275,136936.6875,456100.1725, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:39,878 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,883 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,888 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:39,901 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:39,970 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136548.2925 : 136936.6875, 455853.5275 : 456100.1725]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136548.2925,455853.5275,136936.6875,456100.1725, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:39,996 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:40,044 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,056 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,059 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,067 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:40,074 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,115 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136354.095 : 137130.885, 455730.205 : 456223.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136354.095,455730.205,137130.885,456223.495, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:40,263 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,293 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:40,300 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:40,341 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,350 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135965.7 : 137519.28, 455483.56 : 456470.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=135965.7,455483.56,137519.28,456470.14, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:40,363 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,422 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,424 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,492 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136354.095 : 137130.885, 455730.205 : 456223.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=136354.095,455730.205,137130.885,456223.495, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:40,528 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,534 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,534 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:40,730 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:40,746 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135188.91 : 138296.07, 454990.27 : 456963.43]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=135188.91,454990.27,138296.07,456963.43, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:40,754 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135965.7 : 137519.28, 455483.56 : 456470.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=135965.7,455483.56,137519.28,456470.14, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:40,755 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 12000.006479999996
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=12000.006479999996, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:40,758 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 12000.006479999996
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=12000.006479999996, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:40,773 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[133635.33 : 139849.65, 454003.69 : 457950.01]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=133635.33,454003.69,139849.65,457950.01, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:40,861 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135188.91 : 138296.07, 454990.27 : 456963.43]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=135188.91,454990.27,138296.07,456963.43, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:40,932 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[133635.33 : 139849.65, 454003.69 : 457950.01]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=133635.33,454003.69,139849.65,457950.01, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:41,312 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,327 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,328 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,335 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,350 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 24000.012959999993
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=24000.012959999993, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:41,542 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[130528.17 : 142956.81, 452030.53 : 459923.17]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=130528.17,452030.53,142956.81,459923.17, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:41,552 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,555 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,582 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,582 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,592 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 48000.025919999985
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=48000.025919999985, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:41,658 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 24000.012959999993
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=24000.012959999993, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:41,808 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[124313.85 : 149171.13, 448084.21 : 463869.49]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=124313.85,448084.21,149171.13,463869.49, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:41,808 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,818 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 48000.025919999985
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=48000.025919999985, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:41,851 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,861 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 96000.05183999997
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=96000.05183999997, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:41,864 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 96000.05183999997
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=96000.05183999997, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:41,878 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[130528.17 : 142956.81, 452030.53 : 459923.17]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=130528.17,452030.53,142956.81,459923.17, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:41,884 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:41,888 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:42,034 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[124313.85 : 149171.13, 448084.21 : 463869.49]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=124313.85,448084.21,149171.13,463869.49, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:42,064 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[111885.21 : 161599.77, 440191.57 : 471762.13]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=111885.21,440191.57,161599.77,471762.13, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:42,113 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[111885.21 : 161599.77, 440191.57 : 471762.13]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=111885.21,440191.57,161599.77,471762.13, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:44,769 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:44,948 INFO [geoserver.wms] - 
Request: getFeatureInfo
	PropertyNames = null
	Exceptions = application/vnd.ogc.se_xml
	QueryLayers = [org.geoserver.wms.MapLayerInfo@d1afaa25, org.geoserver.wms.MapLayerInfo@46bac1d9]
	FeatureCount = 8
	GetMapRequest = 
GetMap Request
 version: 1.1.1
 output format: image/png
 width height: 1233,783
 bbox: SRSEnvelope[120170.97 : 153314.01, 445453.33 : 466500.37]
 layers: smartem:cur_measurements_pm10,smartem:stations
 styles: meas_pm10_color_range,stations-active
	InfoFormat = application/vnd.ogc.gml
	XPixel = 806
	YPixel = 271
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, INFO_FORMAT=application/vnd.ogc.gml, STYLES=,stations-active, WIDTH=1233, HEIGHT=783, LAYERS=smartem:cur_measurements_pm10,smartem:stations, REQUEST=GetFeatureInfo, SRS=EPSG:28992, BBOX=120170.97,445453.33,153314.01,466500.37, VERSION=1.1.1, X=806, Y=271, SERVICE=WMS, QUERY_LAYERS=smartem:cur_measurements_pm10,smartem:stations, FEATURE_COUNT=8}
	RequestCharset = null
	Version = 1.1.1
	Request = GetFeatureInfo
2018-02-15 14:21:49,074 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,083 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,087 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 48000.025919999985
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=48000.025919999985, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:49,103 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 48000.025919999985
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=48000.025919999985, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:49,112 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,132 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,573 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[130415.61 : 155272.89, 448326.13 : 464111.41]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=130415.61,448326.13,155272.89,464111.41, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:49,576 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[130415.61 : 155272.89, 448326.13 : 464111.41]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=130415.61,448326.13,155272.89,464111.41, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:49,644 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,660 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,680 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,682 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 24000.012959999993
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=24000.012959999993, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:49,683 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:49,789 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 24000.012959999993
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=24000.012959999993, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:49,909 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136629.93 : 149058.57, 452272.45 : 460165.09]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=136629.93,452272.45,149058.57,460165.09, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:49,959 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[136629.93 : 149058.57, 452272.45 : 460165.09]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=136629.93,452272.45,149058.57,460165.09, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:51,143 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:51,155 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:51,260 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135500.97 : 147929.61, 455061.25 : 462953.89]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=135500.97,455061.25,147929.61,462953.89, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:51,269 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[135500.97 : 147929.61, 455061.25 : 462953.89]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=135500.97,455061.25,147929.61,462953.89, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:52,484 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,488 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,490 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 12000.006479999996
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=12000.006479999996, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:52,502 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,505 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,669 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 12000.006479999996
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=12000.006479999996, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:52,706 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[138608.13 : 144822.45, 457034.41 : 460980.73]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=138608.13,457034.41,144822.45,460980.73, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:52,749 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,762 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[138608.13 : 144822.45, 457034.41 : 460980.73]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=138608.13,457034.41,144822.45,460980.73, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:52,769 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,775 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:52,825 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,848 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:52,899 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:52,964 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[140161.71 : 143268.87, 458020.99 : 459994.15]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=140161.71,458020.99,143268.87,459994.15, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:53,002 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:53,012 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:53,018 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:53,019 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:53,021 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:53,204 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[140161.71 : 143268.87, 458020.99 : 459994.15]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=140161.71,458020.99,143268.87,459994.15, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:53,259 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[140938.5 : 142492.08, 458514.28 : 459500.86]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=140938.5,458514.28,142492.08,459500.86, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:53,327 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[140938.5 : 142492.08, 458514.28 : 459500.86]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=140938.5,458514.28,142492.08,459500.86, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:53,514 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:56,028 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,036 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,036 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,038 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:56,056 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,112 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:56,189 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141464.655 : 142241.445, 458782.765 : 459276.055]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141464.655,458782.765,142241.445,459276.055, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:56,250 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141464.655 : 142241.445, 458782.765 : 459276.055]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141464.655,458782.765,142241.445,459276.055, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:56,540 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,551 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,554 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:56,562 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,566 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:56,626 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:56,809 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141658.8525 : 142047.2475, 458906.0875 : 459152.7325]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141658.8525,458906.0875,142047.2475,459152.7325, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:56,862 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141658.8525 : 142047.2475, 458906.0875 : 459152.7325]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141658.8525,458906.0875,142047.2475,459152.7325, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:21:59,462 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:59,470 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:21:59,550 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_o3 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_o3, name=http://smartem.geonovum.nl:cur_measurements_o3 styleName=null, title=cur_measurements_o3, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:cur_measurements_o3, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:21:59,601 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d886ae5d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141648.9825 : 142037.3775, 458940.5275 : 459187.1725]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=141648.9825,458940.5275,142037.3775,459187.1725, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_o3}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:01,911 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:01,932 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:01,932 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_o3 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_o3, name=http://smartem.geonovum.nl:cur_measurements_o3 styleName=null, title=cur_measurements_o3, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:cur_measurements_o3, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:01,934 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:01,942 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:01,948 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:01,948 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,089 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141454.785 : 142231.575, 458817.205 : 459310.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141454.785,458817.205,142231.575,459310.495, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:02,097 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d886ae5d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141454.785 : 142231.575, 458817.205 : 459310.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=141454.785,458817.205,142231.575,459310.495, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_o3}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:02,137 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141454.785 : 142231.575, 458817.205 : 459310.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141454.785,458817.205,142231.575,459310.495, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:02,152 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,157 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,158 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,164 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:02,182 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,189 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,182 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,331 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_o3 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_o3, name=http://smartem.geonovum.nl:cur_measurements_o3 styleName=null, title=cur_measurements_o3, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:cur_measurements_o3, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:02,361 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141066.39 : 142619.97, 458570.56 : 459557.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141066.39,458570.56,142619.97,459557.14, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:02,464 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:02,486 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141066.39 : 142619.97, 458570.56 : 459557.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141066.39,458570.56,142619.97,459557.14, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:02,543 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d886ae5d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141066.39 : 142619.97, 458570.56 : 459557.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=141066.39,458570.56,142619.97,459557.14, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_o3}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:02,614 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,622 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,624 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,632 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:02,642 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,642 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,644 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:02,889 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:02,899 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_o3 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_o3, name=http://smartem.geonovum.nl:cur_measurements_o3 styleName=null, title=cur_measurements_o3, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 6000.003239999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=6000.003239999998, LAYER=smartem:cur_measurements_o3, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:02,938 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d886ae5d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[140289.6 : 143396.76, 458077.27 : 460050.43]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=140289.6,458077.27,143396.76,460050.43, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_o3}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:02,986 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[140289.6 : 143396.76, 458077.27 : 460050.43]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=140289.6,458077.27,143396.76,460050.43, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:03,058 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[140289.6 : 143396.76, 458077.27 : 460050.43]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=140289.6,458077.27,143396.76,460050.43, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:25,940 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:25,949 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:25,951 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:25,960 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:25,949 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:25,960 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,027 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,031 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_o3 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_o3, name=http://smartem.geonovum.nl:cur_measurements_o3 styleName=null, title=cur_measurements_o3, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:cur_measurements_o3, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,171 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 3000.001619999999
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=3000.001619999999, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,185 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141066.39 : 142619.97, 458654.56 : 459641.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141066.39,458654.56,142619.97,459641.14, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:26,300 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d886ae5d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141066.39 : 142619.97, 458654.56 : 459641.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=141066.39,458654.56,142619.97,459641.14, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_o3}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:26,384 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,387 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,406 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141066.39 : 142619.97, 458654.56 : 459641.14]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141066.39,458654.56,142619.97,459641.14, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:26,407 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,408 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,412 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,413 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,417 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,660 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,690 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d886ae5d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141454.785 : 142231.575, 458901.205 : 459394.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=141454.785,458901.205,142231.575,459394.495, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_o3}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:26,719 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,730 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_pm10 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_pm10, name=http://smartem.geonovum.nl:cur_measurements_pm10 styleName=null, title=cur_measurements_pm10, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:cur_measurements_pm10, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,738 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,745 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:26,760 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 750.0004049999998
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, INFO_FORMAT=application/vnd.ogc.gml, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=750.0004049999998, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,765 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_o3 identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:cur_measurements_o3, name=http://smartem.geonovum.nl:cur_measurements_o3 styleName=null, title=cur_measurements_o3, legendInfo=null]]
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	Transparent = true
	LegendOptions = {}
	Scale = 1500.0008099999995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1500.0008099999995, LAYER=smartem:cur_measurements_o3, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-15 14:22:26,843 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:27,149 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 14:22:27,151 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141454.785 : 142231.575, 458901.205 : 459394.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141454.785,458901.205,142231.575,459394.495, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:27,167 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141454.785 : 142231.575, 458901.205 : 459394.495]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141454.785,458901.205,142231.575,459394.495, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:27,223 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141648.9825 : 142037.3775, 459024.5275 : 459271.1725]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141648.9825,459024.5275,142037.3775,459271.1725, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:27,250 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d886ae5d]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141648.9825 : 142037.3775, 459024.5275 : 459271.1725]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_o3_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=141648.9825,459024.5275,142037.3775,459271.1725, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_o3}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 14:22:27,669 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@d1afaa25]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[141648.9825 : 142037.3775, 459024.5275 : 459271.1725]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1849
	Height = 1174
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_pm10_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, INFO_FORMAT=application/vnd.ogc.gml, BBOX=141648.9825,459024.5275,142037.3775,459271.1725, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1849, HEIGHT=1174, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_pm10}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 15:50:43,622 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 15:50:43,631 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-15 15:50:43,913 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[170590.08 : 203491.2, 414400.0 : 440124.16]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1224
	Height = 957
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=stations-active]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=170590.08,414400,203491.2,440124.16, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1224, HEIGHT=957, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-15 15:50:43,921 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Interpolations = []
	SRS = EPSG:28992
	Exceptions = SE_XML
	Layers = [org.geoserver.wms.MapLayerInfo@384f1f90]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[170590.08 : 203491.2, 414400.0 : 440124.16]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	ScaleMethod = null
	StyleBody = null
	Width = 1224
	Height = 957
	SldVersion = null
	StyleVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	MaxFeatures = null
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	StyleFormat = sld
	TilesOrigin = null
	Palette = null
	Tiled = false
	FeatureVersion = null
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	Get = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=170590.08,414400,203491.2,440124.16, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1224, HEIGHT=957, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_no2}
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-16 15:30:12,865 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-16 15:30:12,865 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-16 15:30:12,867 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-16 15:30:12,889 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Env = {}
	Width = 20
	Height = 20
	FeatureType = null
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Styles = [StyleImpl[ name=stations-active]]
	Transparent = true
	LegendOptions = {}
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	Get = false
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-16 15:31:13,256 ERROR [geotools.rendering] - Unable to obtain connection: The connection attempt failed.
java.lang.RuntimeException: Unable to obtain connection: The connection attempt failed.
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.getConnection(JDBCDataStore.java:2019)
	at org.geotools.jdbc.JDBCDataStore.getConnection(JDBCDataStore.java:2049)
	at org.geotools.jdbc.JDBCFeatureSource.getReaderInternal(JDBCFeatureSource.java:596)
	at org.geotools.data.store.ContentFeatureSource.getReader(ContentFeatureSource.java:634)
	at org.geotools.data.store.ContentFeatureCollection.features(ContentFeatureCollection.java:173)
	at org.geotools.data.store.ContentFeatureCollection.features(ContentFeatureCollection.java:58)
	at org.geotools.renderer.lite.StreamingRenderer.drawPlain(StreamingRenderer.java:2282)
	at org.geotools.renderer.lite.StreamingRenderer.processStylers(StreamingRenderer.java:1917)
	at org.geotools.renderer.lite.StreamingRenderer.paint(StreamingRenderer.java:833)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:548)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:261)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:131)
	at org.geoserver.wms.GetMap.executeInternal(GetMap.java:505)
	at org.geoserver.wms.GetMap.run(GetMap.java:249)
	at org.geoserver.wms.GetMap.run(GetMap.java:119)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:320)
	at sun.reflect.GeneratedMethodAccessor232.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:302)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:34)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:62)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:36)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:74)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)
	at com.sun.proxy.$Proxy22.getMap(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:840)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:268)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:147)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:50)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:75)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:71)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:71)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:50)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:54)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:53)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:152)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:87)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:48)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:44)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:620)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)
	at org.apache.coyote.ajp.AjpProcessor.service(AjpProcessor.java:783)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:788)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1485)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:249)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1148)
	at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 131 more
Caused by: java.io.EOFException
	at org.postgresql.core.PGStream.ReceiveChar(PGStream.java:284)
	at org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(ConnectionFactoryImpl.java:398)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:195)
	... 146 more
2018-02-16 15:31:13,263 ERROR [geoserver.ows] - 
java.lang.RuntimeException: Unable to obtain connection: The connection attempt failed.
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.getConnection(JDBCDataStore.java:2019)
	at org.geotools.jdbc.JDBCDataStore.getConnection(JDBCDataStore.java:2049)
	at org.geotools.jdbc.JDBCFeatureSource.getCountInternal(JDBCFeatureSource.java:461)
	at org.geotools.data.store.ContentFeatureSource.getCount(ContentFeatureSource.java:485)
	at org.geotools.data.store.ContentFeatureCollection.size(ContentFeatureCollection.java:236)
	at org.geotools.feature.collection.DecoratingSimpleFeatureCollection.size(DecoratingSimpleFeatureCollection.java:113)
	at org.geotools.data.crs.ReprojectFeatureResults.size(ReprojectFeatureResults.java:126)
	at org.geoserver.wfs.GetFeature.run(GetFeature.java:531)
	at org.geoserver.wfs.DefaultWebFeatureService20.getFeature(DefaultWebFeatureService20.java:98)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:302)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)
	at com.sun.proxy.$Proxy58.getFeature(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:840)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:268)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:147)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:50)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:75)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:71)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:71)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:50)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:54)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:53)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:152)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:87)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:48)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:44)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:620)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)
	at org.apache.coyote.ajp.AjpProcessor.service(AjpProcessor.java:783)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:788)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1485)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:249)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1148)
	at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 118 more
Caused by: java.io.EOFException
	at org.postgresql.core.PGStream.ReceiveChar(PGStream.java:284)
	at org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(ConnectionFactoryImpl.java:398)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:195)
	... 133 more
2018-02-16 15:31:13,287 ERROR [geoserver.ows] - 
org.geoserver.platform.ServiceException: Rendering process failed
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:578)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:261)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:131)
	at org.geoserver.wms.GetMap.executeInternal(GetMap.java:505)
	at org.geoserver.wms.GetMap.run(GetMap.java:249)
	at org.geoserver.wms.GetMap.run(GetMap.java:119)
	at org.geoserver.wms.DefaultWebMapService.getMap(DefaultWebMapService.java:320)
	at sun.reflect.GeneratedMethodAccessor232.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:302)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.geoserver.kml.WebMapServiceKmlInterceptor.invoke(WebMapServiceKmlInterceptor.java:34)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:62)
	at org.geoserver.gwc.wms.CacheSeedingWebMapService.invoke(CacheSeedingWebMapService.java:36)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:74)
	at org.geoserver.gwc.wms.CachingWebMapService.invoke(CachingWebMapService.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.geoserver.ows.util.RequestObjectLogger.invoke(RequestObjectLogger.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)
	at com.sun.proxy.$Proxy22.getMap(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.ows.Dispatcher.execute(Dispatcher.java:840)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:268)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:147)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:50)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:75)
	at org.geoserver.wms.animate.AnimatorFilter.doFilter(AnimatorFilter.java:71)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:71)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:46)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:50)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:54)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:69)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:53)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:73)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:152)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:87)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:42)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:48)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:44)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:620)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)
	at org.apache.coyote.ajp.AjpProcessor.service(AjpProcessor.java:783)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:788)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1485)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: The connection attempt failed.
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.getConnection(JDBCDataStore.java:2019)
	at org.geotools.jdbc.JDBCDataStore.getConnection(JDBCDataStore.java:2049)
	at org.geotools.jdbc.JDBCFeatureSource.getReaderInternal(JDBCFeatureSource.java:596)
	at org.geotools.data.store.ContentFeatureSource.getReader(ContentFeatureSource.java:634)
	at org.geotools.data.store.ContentFeatureCollection.features(ContentFeatureCollection.java:173)
	at org.geotools.data.store.ContentFeatureCollection.features(ContentFeatureCollection.java:58)
	at org.geotools.renderer.lite.StreamingRenderer.drawPlain(StreamingRenderer.java:2282)
	at org.geotools.renderer.lite.StreamingRenderer.processStylers(StreamingRenderer.java:1917)
	at org.geotools.renderer.lite.StreamingRenderer.paint(StreamingRenderer.java:833)
	at org.geoserver.wms.map.RenderedImageMapOutputFormat.produceMap(RenderedImageMapOutputFormat.java:548)
	... 121 more
Caused by: org.postgresql.util.PSQLException: The connection attempt failed.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:249)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1148)
	at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 131 more
Caused by: java.io.EOFException
	at org.postgresql.core.PGStream.ReceiveChar(PGStream.java:284)
	at org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(ConnectionFactoryImpl.java:398)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:195)
	... 146 more
2018-02-17 22:55:17,133 INFO [georss.GeoRSSPoller] - destroy() invoked
2018-02-17 22:55:17,140 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2018-02-17 22:55:17,142 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2018-02-17 22:55:17,143 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2018-02-17 22:55:17,143 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2018-02-17 22:55:17,144 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2018-02-17 22:55:17,144 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2018-02-17 22:55:17,148 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2018-02-17 22:55:17,151 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2018-02-17 22:55:17,151 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2018-02-17 22:55:17,151 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2018-02-17 22:55:17,169 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2018-02-17 22:55:56,505 INFO [org.geoserver] - Loaded style 'dem'
2018-02-17 22:55:56,521 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-17 22:55:56,523 INFO [org.geoserver] - Loaded style 'pophatch'
2018-02-17 22:55:56,531 INFO [org.geoserver] - Loaded style 'green'
2018-02-17 22:55:56,532 INFO [org.geoserver] - Loaded style 'rain'
2018-02-17 22:55:56,534 INFO [org.geoserver] - Loaded style 'stations-inactive'
2018-02-17 22:55:56,540 INFO [org.geoserver] - Loaded style 'burg'
2018-02-17 22:55:56,541 INFO [org.geoserver] - Loaded style 'stations-active'
2018-02-17 22:55:56,542 INFO [org.geoserver] - Loaded style 'poi'
2018-02-17 22:55:56,543 INFO [org.geoserver] - Loaded style 'stations'
2018-02-17 22:55:56,544 INFO [org.geoserver] - Loaded style 'line'
2018-02-17 22:55:56,545 INFO [org.geoserver] - Loaded style 'cite_lakes'
2018-02-17 22:55:56,550 INFO [org.geoserver] - Loaded style 'tiger_roads'
2018-02-17 22:55:56,552 INFO [org.geoserver] - Loaded style 'population'
2018-02-17 22:55:56,553 INFO [org.geoserver] - Loaded style 'restricted'
2018-02-17 22:55:56,555 INFO [org.geoserver] - Loaded style 'capitals'
2018-02-17 22:55:56,560 INFO [org.geoserver] - Loaded style 'generic'
2018-02-17 22:55:56,561 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2018-02-17 22:55:56,562 INFO [org.geoserver] - Loaded style 'giant_polygon'
2018-02-17 22:55:56,563 INFO [org.geoserver] - Loaded style 'raster'
2018-02-17 22:55:56,564 INFO [org.geoserver] - Loaded style 'simple_streams'
2018-02-17 22:55:56,566 INFO [org.geoserver] - Loaded style 'meteo'
2018-02-17 22:55:56,567 INFO [org.geoserver] - Loaded style 'grass'
2018-02-17 22:55:56,572 INFO [org.geoserver] - Loaded style 'point'
2018-02-17 22:55:56,573 INFO [org.geoserver] - Loaded style 'simple_roads'
2018-02-17 22:55:56,574 INFO [org.geoserver] - Loaded style 'polygon'
2018-02-17 22:55:56,575 INFO [org.geoserver] - Loaded default workspace smartem
2018-02-17 22:55:56,586 INFO [org.geoserver] - Loaded workspace 'smartem'
2018-02-17 22:55:56,596 INFO [org.geoserver] - Loaded style 'meas_pm25_color_range'
2018-02-17 22:55:56,599 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-17 22:55:56,604 INFO [org.geoserver] - Loaded style 'meas_co2_color_range'
2018-02-17 22:55:56,606 INFO [org.geoserver] - Loaded style 'meas_pm10_color_range'
2018-02-17 22:55:56,607 INFO [org.geoserver] - Loaded style 'meas_kohm_raw'
2018-02-17 22:55:56,609 INFO [org.geoserver] - Loaded style 'meas_o3_color_range'
2018-02-17 22:55:56,611 INFO [org.geoserver] - Loaded style 'meas_co_plain'
2018-02-17 22:55:56,616 INFO [org.geoserver] - Loaded style 'meas_no2_color_range'
2018-02-17 22:55:57,304 INFO [org.geoserver] - Loaded store 'pg_smartem_refined', enabled
2018-02-17 22:55:57,323 INFO [org.geoserver] - Loaded data store 'pg_smartem_refined'
2018-02-17 22:55:57,555 WARN [org.geoserver] - Error connecting to 'pg_smartem_refined'. Disabling.
2018-02-17 22:55:57,556 INFO [org.geoserver] - 
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.impl.DataStoreInfoImpl.getDataStore(DataStoreInfoImpl.java:38)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:352)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:223)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:36)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:109)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:296)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 84 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 88 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 92 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 104 more
2018-02-17 22:55:57,629 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:55:59,454 INFO [org.geoserver] - Loaded feature type 'timeseries_o3_raw', enabled
2018-02-17 22:55:59,491 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,554 INFO [org.geoserver] - Loaded layer 'timeseries_o3_raw'
2018-02-17 22:55:59,577 INFO [org.geoserver] - Loaded feature type 'timeseries_co', enabled
2018-02-17 22:55:59,578 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,585 INFO [org.geoserver] - Loaded layer 'timeseries_co'
2018-02-17 22:55:59,593 INFO [org.geoserver] - Loaded feature type 'timeseries_co_raw', enabled
2018-02-17 22:55:59,594 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,604 INFO [org.geoserver] - Loaded layer 'timeseries_co_raw'
2018-02-17 22:55:59,618 INFO [org.geoserver] - Loaded feature type 'timeseries_stations', enabled
2018-02-17 22:55:59,619 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,626 INFO [org.geoserver] - Loaded layer 'timeseries_stations'
2018-02-17 22:55:59,635 INFO [org.geoserver] - Loaded feature type 'timeseries_no2_raw', enabled
2018-02-17 22:55:59,636 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,649 INFO [org.geoserver] - Loaded layer 'timeseries_no2_raw'
2018-02-17 22:55:59,659 INFO [org.geoserver] - Loaded feature type 'timeseries_noise_level_avg', enabled
2018-02-17 22:55:59,661 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,668 INFO [org.geoserver] - Loaded layer 'timeseries_noise_level_avg'
2018-02-17 22:55:59,672 INFO [org.geoserver] - Loaded feature type 'timeseries_no2', enabled
2018-02-17 22:55:59,672 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,678 INFO [org.geoserver] - Loaded layer 'timeseries_no2'
2018-02-17 22:55:59,683 INFO [org.geoserver] - Loaded feature type 'timeseries_temperature', enabled
2018-02-17 22:55:59,684 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,691 INFO [org.geoserver] - Loaded layer 'timeseries_temperature'
2018-02-17 22:55:59,694 INFO [org.geoserver] - Loaded feature type 'timeseries', enabled
2018-02-17 22:55:59,699 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,701 INFO [org.geoserver] - Loaded layer 'timeseries'
2018-02-17 22:55:59,704 INFO [org.geoserver] - Loaded feature type 'timeseries_barometer', enabled
2018-02-17 22:55:59,705 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,710 INFO [org.geoserver] - Loaded layer 'timeseries_barometer'
2018-02-17 22:55:59,714 INFO [org.geoserver] - Loaded feature type 'timeseries_humidity', enabled
2018-02-17 22:55:59,714 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,719 INFO [org.geoserver] - Loaded layer 'timeseries_humidity'
2018-02-17 22:55:59,723 INFO [org.geoserver] - Loaded feature type 'timeseries_co2', enabled
2018-02-17 22:55:59,723 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,725 INFO [org.geoserver] - Loaded layer 'timeseries_co2'
2018-02-17 22:55:59,732 INFO [org.geoserver] - Loaded feature type 'timeseries_pm25', enabled
2018-02-17 22:55:59,733 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,734 INFO [org.geoserver] - Loaded layer 'timeseries_pm25'
2018-02-17 22:55:59,742 INFO [org.geoserver] - Loaded feature type 'timeseries_pm10', enabled
2018-02-17 22:55:59,742 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,744 INFO [org.geoserver] - Loaded layer 'timeseries_pm10'
2018-02-17 22:55:59,752 INFO [org.geoserver] - Loaded feature type 'timeseries_o3', enabled
2018-02-17 22:55:59,752 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 22:55:59,754 INFO [org.geoserver] - Loaded layer 'timeseries_o3'
2018-02-17 22:55:59,774 INFO [org.geoserver] - Loaded store 'pg_smartem_rt', enabled
2018-02-17 22:55:59,775 INFO [org.geoserver] - Loaded data store 'pg_smartem_rt'
2018-02-17 22:55:59,782 WARN [org.geoserver] - Error connecting to 'pg_smartem_rt'. Disabling.
2018-02-17 22:55:59,782 INFO [org.geoserver] - 
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.impl.DataStoreInfoImpl.getDataStore(DataStoreInfoImpl.java:38)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:352)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:223)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:36)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:109)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:296)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 84 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 88 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 92 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 104 more
2018-02-17 22:55:59,798 INFO [org.geoserver] - Loaded feature type 'last_measurements_temperature', enabled
2018-02-17 22:55:59,805 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,811 INFO [org.geoserver] - Loaded layer 'last_measurements_temperature'
2018-02-17 22:55:59,817 INFO [org.geoserver] - Loaded feature type 'cur_measurements_no2', enabled
2018-02-17 22:55:59,818 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,820 INFO [org.geoserver] - Loaded layer 'cur_measurements_no2'
2018-02-17 22:55:59,826 INFO [org.geoserver] - Loaded feature type 'last_measurements_humidity', enabled
2018-02-17 22:55:59,827 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,828 INFO [org.geoserver] - Loaded layer 'last_measurements_humidity'
2018-02-17 22:55:59,832 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2_raw', enabled
2018-02-17 22:55:59,836 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,840 INFO [org.geoserver] - Loaded layer 'last_measurements_no2_raw'
2018-02-17 22:55:59,844 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3_raw', enabled
2018-02-17 22:55:59,845 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,846 INFO [org.geoserver] - Loaded layer 'last_measurements_o3_raw'
2018-02-17 22:55:59,849 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm10', enabled
2018-02-17 22:55:59,849 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,852 INFO [org.geoserver] - Loaded layer 'last_measurements_pm10'
2018-02-17 22:55:59,859 INFO [org.geoserver] - Loaded feature type 'last_measurements_co', enabled
2018-02-17 22:55:59,860 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,861 INFO [org.geoserver] - Loaded layer 'last_measurements_co'
2018-02-17 22:55:59,864 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2', enabled
2018-02-17 22:55:59,864 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,869 INFO [org.geoserver] - Loaded layer 'last_measurements_no2'
2018-02-17 22:55:59,872 INFO [org.geoserver] - Loaded feature type 'stations', enabled
2018-02-17 22:55:59,872 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,874 INFO [org.geoserver] - Loaded layer 'stations'
2018-02-17 22:55:59,881 INFO [org.geoserver] - Loaded feature type 'last_measurements_noise_level_avg', enabled
2018-02-17 22:55:59,882 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,883 INFO [org.geoserver] - Loaded layer 'last_measurements_noise_level_avg'
2018-02-17 22:55:59,889 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm25', enabled
2018-02-17 22:55:59,890 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,892 INFO [org.geoserver] - Loaded layer 'last_measurements_pm25'
2018-02-17 22:55:59,895 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm10', enabled
2018-02-17 22:55:59,900 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,903 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm10'
2018-02-17 22:55:59,906 INFO [org.geoserver] - Loaded feature type 'cur_measurements_o3', enabled
2018-02-17 22:55:59,906 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,911 INFO [org.geoserver] - Loaded layer 'cur_measurements_o3'
2018-02-17 22:55:59,914 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3', enabled
2018-02-17 22:55:59,915 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,916 INFO [org.geoserver] - Loaded layer 'last_measurements_o3'
2018-02-17 22:55:59,923 INFO [org.geoserver] - Loaded feature type 'last_measurements_barometer', enabled
2018-02-17 22:55:59,924 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,925 INFO [org.geoserver] - Loaded layer 'last_measurements_barometer'
2018-02-17 22:55:59,928 INFO [org.geoserver] - Loaded feature type 'cur_measurements_barometer', enabled
2018-02-17 22:55:59,928 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,933 INFO [org.geoserver] - Loaded layer 'cur_measurements_barometer'
2018-02-17 22:55:59,936 INFO [org.geoserver] - Loaded feature type 'cur_measurements_noise_level_avg', enabled
2018-02-17 22:55:59,937 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,938 INFO [org.geoserver] - Loaded layer 'cur_measurements_noise_level_avg'
2018-02-17 22:55:59,945 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co2', enabled
2018-02-17 22:55:59,945 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,946 INFO [org.geoserver] - Loaded layer 'cur_measurements_co2'
2018-02-17 22:55:59,949 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm25', enabled
2018-02-17 22:55:59,953 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,954 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm25'
2018-02-17 22:55:59,957 INFO [org.geoserver] - Loaded feature type 'last_measurements_co_raw', enabled
2018-02-17 22:55:59,957 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,958 INFO [org.geoserver] - Loaded layer 'last_measurements_co_raw'
2018-02-17 22:55:59,964 INFO [org.geoserver] - Loaded feature type 'cur_measurements_temperature', enabled
2018-02-17 22:55:59,965 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,966 INFO [org.geoserver] - Loaded layer 'cur_measurements_temperature'
2018-02-17 22:55:59,968 INFO [org.geoserver] - Loaded feature type 'last_measurements_co2', enabled
2018-02-17 22:55:59,969 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,974 INFO [org.geoserver] - Loaded layer 'last_measurements_co2'
2018-02-17 22:55:59,977 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co', enabled
2018-02-17 22:55:59,977 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:55:59,978 INFO [org.geoserver] - Loaded layer 'cur_measurements_co'
2018-02-17 22:56:00,025 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:00,026 INFO [org.geoserver] - Loaded feature type 'cur_measurements_humidity', enabled
2018-02-17 22:56:00,027 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 22:56:00,033 INFO [org.geoserver] - Loaded layer 'cur_measurements_humidity'
2018-02-17 22:56:00,161 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-17 22:56:00,205 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-17 22:56:00,205 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-17 22:56:00,205 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-17 22:56:00,342 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-17 22:56:00,343 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2018-02-17 22:56:00,343 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2018-02-17 22:56:00,343 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-17 22:56:00,507 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2018-02-17 22:56:00,507 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2018-02-17 22:56:00,508 INFO [gwc.layer] - Loading tile layers from gwc-layers
2018-02-17 22:56:00,559 INFO [gwc.layer] - GWC configuration based on GeoServer's Catalog loaded successfuly
2018-02-17 22:56:00,559 INFO [layer.TileLayerDispatcher] - Configuration GeoServer Catalog Configuration contained no layers.
2018-02-17 22:56:00,559 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2018-02-17 22:56:00,563 INFO [config.XMLConfiguration] - Initializing layers from gwc
2018-02-17 22:56:00,564 INFO [layer.TileLayerDispatcher] - Configuration gwc contained no layers.
2018-02-17 22:56:00,577 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-17 22:56:00,577 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to /opt/geoserver/data_dir, using it as the default prefix. ***
2018-02-17 22:56:00,577 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-17 22:56:00,753 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-17 22:56:00,776 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-17 22:56:00,788 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-17 22:56:00,794 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2018-02-17 22:56:00,794 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2018-02-17 22:56:00,797 INFO [diskquota.DiskQuotaMonitor] - 0 layers attached to global quota 500.0 MB
2018-02-17 22:56:00,878 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2018-02-17 22:56:01,427 INFO [org.geoserver] - Loaded service 'wms', enabled
2018-02-17 22:56:01,441 INFO [org.geoserver] - Loaded service 'wcs', enabled
2018-02-17 22:56:01,524 INFO [org.geoserver] - Loaded service 'wfs', enabled
2018-02-17 22:56:01,553 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2018-02-17 22:56:01,593 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,596 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,606 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,613 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,622 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,625 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,634 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,636 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,646 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,652 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,665 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,672 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,679 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,683 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,692 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,713 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,724 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,731 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,752 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,753 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,760 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,769 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,769 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,773 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,780 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,786 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,787 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,795 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,795 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,797 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,805 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,806 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,807 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,807 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,808 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,809 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,810 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,810 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,813 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,828 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,829 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,830 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,832 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,835 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:01,848 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,854 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,865 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,883 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,894 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,896 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 94 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 98 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 102 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 114 more
2018-02-17 22:56:01,905 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,906 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:01,922 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,925 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:01,937 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,944 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:01,954 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,956 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:01,967 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:01,969 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,008 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,009 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,009 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,010 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,010 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,010 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,010 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,011 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,012 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,015 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,017 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,017 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,018 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,019 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,019 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,020 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,027 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,028 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,029 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,030 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,030 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,031 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,031 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,031 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,039 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,039 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,051 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,053 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,072 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,074 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,091 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,093 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,101 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,103 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,119 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,121 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,125 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,133 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,141 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,143 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,151 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,154 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,170 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,174 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,182 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,184 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,192 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,194 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,203 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,213 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,214 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,214 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,215 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,216 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,216 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,216 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,216 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,216 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,217 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,217 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,217 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,217 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,217 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,218 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,218 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,218 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,218 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,218 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,219 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,219 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,219 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,219 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,221 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,227 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,242 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,248 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,256 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,267 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,273 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,275 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,283 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,285 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,316 WARN [geoserver.catalog] - Error while getting feature type, flushing cache and retrying: {0}
2018-02-17 22:56:02,321 ERROR [gwc.layer] - An error occurred trying to determine if the layer is geometryless
java.io.IOException
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:630)
	at org.geoserver.catalog.ResourcePool.getCacheableFeatureType(ResourcePool.java:897)
	at org.geoserver.catalog.ResourcePool.tryGetFeatureType(ResourcePool.java:884)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:878)
	at org.geoserver.catalog.ResourcePool.getFeatureType(ResourcePool.java:865)
	at org.geoserver.catalog.impl.FeatureTypeInfoImpl.getFeatureType(FeatureTypeInfoImpl.java:120)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.geoserver.catalog.impl.ModificationProxy.invoke(ModificationProxy.java:147)
	at com.sun.proxy.$Proxy14.getFeatureType(Unknown Source)
	at org.geoserver.gwc.layer.CatalogConfiguration.isLayerExposable(CatalogConfiguration.java:453)
	at org.geoserver.gwc.config.GWCInitializer.addLayersToNotCache(GWCInitializer.java:283)
	at org.geoserver.gwc.config.GWCInitializer.initialize(GWCInitializer.java:153)
	at org.geoserver.config.GeoServerLoader.loadInitializers(GeoServerLoader.java:147)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:127)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)
	at org.geoserver.platform.GeoServerExtensions.getBean(GeoServerExtensions.java:238)
	at org.geoserver.platform.GeoServerExtensions.extensions(GeoServerExtensions.java:139)
	at org.geoserver.ows.Dispatcher.initApplicationContext(Dispatcher.java:188)
	at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)
	at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:119)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:94)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:140)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:23)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4733)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5195)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to obtain connection: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2078)
	at org.geotools.jdbc.JDBCDataStore.createTypeNames(JDBCDataStore.java:978)
	at org.geotools.data.store.ContentDataStore.getTypeNames(ContentDataStore.java:308)
	at org.vfny.geoserver.util.DataStoreUtils.getDataAccess(DataStoreUtils.java:96)
	at org.geoserver.catalog.ResourcePool.getDataStore(ResourcePool.java:590)
	... 93 more
Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1549)
	at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1388)
	at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)
	at org.geotools.data.jdbc.datasource.AbstractManageableDataSource.getConnection(AbstractManageableDataSource.java:48)
	at org.geotools.jdbc.JDBCDataStore.createConnection(JDBCDataStore.java:2063)
	... 97 more
Caused by: org.postgresql.util.PSQLException: Connection to postgis:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:239)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:66)
	at org.postgresql.jdbc2.AbstractJdbc2Connection.<init>(AbstractJdbc2Connection.java:127)
	at org.postgresql.jdbc3.AbstractJdbc3Connection.<init>(AbstractJdbc3Connection.java:29)
	at org.postgresql.jdbc3g.AbstractJdbc3gConnection.<init>(AbstractJdbc3gConnection.java:21)
	at org.postgresql.jdbc4.AbstractJdbc4Connection.<init>(AbstractJdbc4Connection.java:41)
	at org.postgresql.jdbc4.Jdbc4Connection.<init>(Jdbc4Connection.java:24)
	at org.postgresql.Driver.makeConnection(Driver.java:414)
	at org.postgresql.Driver.connect(Driver.java:282)
	at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:38)
	at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
	at org.apache.commons.dbcp.BasicDataSource.validateConnectionFactory(BasicDataSource.java:1556)
	at org.apache.commons.dbcp.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:1545)
	... 101 more
Caused by: java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at org.postgresql.core.PGStream.<init>(PGStream.java:61)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:121)
	... 113 more
2018-02-17 22:56:02,421 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,422 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,422 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,422 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,422 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,422 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,423 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,423 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,423 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,423 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,423 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,424 ERROR [geotools.jdbc] - There's code using JDBC based datastore and not disposing them. This may lead to temporary loss of database connections. Please make sure all data access code calls DataStore.dispose() before freeing all references to it
2018-02-17 22:56:02,631 INFO [ows.OWSHandlerMapping] - Mapped URL path [/gwc/service/**] onto handler 'dispatcher'
2018-02-17 22:56:02,680 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2018-02-17 22:56:02,730 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2018-02-17 22:56:02,731 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2018-02-17 22:56:02,977 INFO [rest.RESTDispatcher] - Created RESTDispatcher with 15 paths
2018-02-17 22:56:03,029 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2018-02-17 22:56:03,029 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2018-02-17 22:56:03,078 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-17 22:56:03,671 INFO [org.geoserver] - GeoServer configuration lock is enabled
2018-02-17 22:56:04,376 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms] onto handler 'dispatcher'
2018-02-17 22:56:04,377 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms/*] onto handler 'dispatcher'
2018-02-17 22:56:04,526 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate/*] onto handler 'dispatcher'
2018-02-17 22:56:04,526 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate] onto handler 'dispatcher'
2018-02-17 22:56:04,691 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows/**] onto handler 'dispatcher'
2018-02-17 22:56:04,692 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows] onto handler 'dispatcher'
2018-02-17 22:56:04,714 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs] onto handler 'dispatcher'
2018-02-17 22:56:04,714 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs/**] onto handler 'dispatcher'
2018-02-17 22:56:10,197 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml] onto handler 'dispatcher'
2018-02-17 22:56:10,197 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/*] onto handler 'dispatcher'
2018-02-17 22:56:10,197 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/icon/**/*] onto handler 'kmlIconService'
2018-02-17 22:56:10,638 INFO [ows.OWSHandlerMapping] - Mapped URL path [/TestWfsPost] onto handler 'wfsTestServlet'
2018-02-17 22:56:10,638 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs/*] onto handler 'dispatcher'
2018-02-17 22:56:10,638 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs] onto handler 'dispatcher'
2018-02-17 22:56:19,362 INFO [geoserver.security] - Start reloading user/groups for service named default
2018-02-17 22:56:19,367 INFO [geoserver.security] - Reloading user/groups successful for service named default
2018-02-17 22:56:20,281 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2018-02-17 22:56:20,284 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2018-02-17 22:56:54,781 INFO [georss.GeoRSSPoller] - destroy() invoked
2018-02-17 22:56:54,782 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2018-02-17 22:56:54,789 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2018-02-17 22:56:54,815 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2018-02-17 22:56:54,841 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2018-02-17 22:56:54,846 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2018-02-17 22:56:54,846 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2018-02-17 22:56:54,852 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2018-02-17 22:56:54,855 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2018-02-17 22:56:54,855 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2018-02-17 22:56:54,855 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2018-02-17 22:56:54,907 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2018-02-17 23:00:40,040 INFO [org.geoserver] - Loaded style 'dem'
2018-02-17 23:00:40,050 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-17 23:00:40,079 INFO [org.geoserver] - Loaded style 'pophatch'
2018-02-17 23:00:40,094 INFO [org.geoserver] - Loaded style 'green'
2018-02-17 23:00:40,096 INFO [org.geoserver] - Loaded style 'rain'
2018-02-17 23:00:40,100 INFO [org.geoserver] - Loaded style 'stations-inactive'
2018-02-17 23:00:40,106 INFO [org.geoserver] - Loaded style 'burg'
2018-02-17 23:00:40,118 INFO [org.geoserver] - Loaded style 'stations-active'
2018-02-17 23:00:40,125 INFO [org.geoserver] - Loaded style 'poi'
2018-02-17 23:00:40,127 INFO [org.geoserver] - Loaded style 'stations'
2018-02-17 23:00:40,134 INFO [org.geoserver] - Loaded style 'line'
2018-02-17 23:00:40,135 INFO [org.geoserver] - Loaded style 'cite_lakes'
2018-02-17 23:00:40,137 INFO [org.geoserver] - Loaded style 'tiger_roads'
2018-02-17 23:00:40,152 INFO [org.geoserver] - Loaded style 'population'
2018-02-17 23:00:40,153 INFO [org.geoserver] - Loaded style 'restricted'
2018-02-17 23:00:40,155 INFO [org.geoserver] - Loaded style 'capitals'
2018-02-17 23:00:40,158 INFO [org.geoserver] - Loaded style 'generic'
2018-02-17 23:00:40,160 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2018-02-17 23:00:40,166 INFO [org.geoserver] - Loaded style 'giant_polygon'
2018-02-17 23:00:40,167 INFO [org.geoserver] - Loaded style 'raster'
2018-02-17 23:00:40,168 INFO [org.geoserver] - Loaded style 'simple_streams'
2018-02-17 23:00:40,169 INFO [org.geoserver] - Loaded style 'meteo'
2018-02-17 23:00:40,177 INFO [org.geoserver] - Loaded style 'grass'
2018-02-17 23:00:40,178 INFO [org.geoserver] - Loaded style 'point'
2018-02-17 23:00:40,179 INFO [org.geoserver] - Loaded style 'simple_roads'
2018-02-17 23:00:40,186 INFO [org.geoserver] - Loaded style 'polygon'
2018-02-17 23:00:40,189 INFO [org.geoserver] - Loaded default workspace smartem
2018-02-17 23:00:40,224 INFO [org.geoserver] - Loaded workspace 'smartem'
2018-02-17 23:00:40,238 INFO [org.geoserver] - Loaded style 'meas_pm25_color_range'
2018-02-17 23:00:40,247 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-17 23:00:40,257 INFO [org.geoserver] - Loaded style 'meas_co2_color_range'
2018-02-17 23:00:40,260 INFO [org.geoserver] - Loaded style 'meas_pm10_color_range'
2018-02-17 23:00:40,286 INFO [org.geoserver] - Loaded style 'meas_kohm_raw'
2018-02-17 23:00:40,293 INFO [org.geoserver] - Loaded style 'meas_o3_color_range'
2018-02-17 23:00:40,296 INFO [org.geoserver] - Loaded style 'meas_co_plain'
2018-02-17 23:00:40,297 INFO [org.geoserver] - Loaded style 'meas_no2_color_range'
2018-02-17 23:00:41,358 INFO [org.geoserver] - Loaded store 'pg_smartem_refined', enabled
2018-02-17 23:00:41,367 INFO [org.geoserver] - Loaded data store 'pg_smartem_refined'
2018-02-17 23:00:45,145 INFO [org.geoserver] - Loaded feature type 'timeseries_o3_raw', enabled
2018-02-17 23:00:45,164 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,210 INFO [org.geoserver] - Loaded layer 'timeseries_o3_raw'
2018-02-17 23:00:45,368 INFO [org.geoserver] - Loaded feature type 'timeseries_co', enabled
2018-02-17 23:00:45,379 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,382 INFO [org.geoserver] - Loaded layer 'timeseries_co'
2018-02-17 23:00:45,391 INFO [org.geoserver] - Loaded feature type 'timeseries_co_raw', enabled
2018-02-17 23:00:45,391 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,399 INFO [org.geoserver] - Loaded layer 'timeseries_co_raw'
2018-02-17 23:00:45,413 INFO [org.geoserver] - Loaded feature type 'timeseries_stations', enabled
2018-02-17 23:00:45,413 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,420 INFO [org.geoserver] - Loaded layer 'timeseries_stations'
2018-02-17 23:00:45,430 INFO [org.geoserver] - Loaded feature type 'timeseries_no2_raw', enabled
2018-02-17 23:00:45,431 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,438 INFO [org.geoserver] - Loaded layer 'timeseries_no2_raw'
2018-02-17 23:00:45,445 INFO [org.geoserver] - Loaded feature type 'timeseries_noise_level_avg', enabled
2018-02-17 23:00:45,446 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,452 INFO [org.geoserver] - Loaded layer 'timeseries_noise_level_avg'
2018-02-17 23:00:45,461 INFO [org.geoserver] - Loaded feature type 'timeseries_no2', enabled
2018-02-17 23:00:45,462 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,464 INFO [org.geoserver] - Loaded layer 'timeseries_no2'
2018-02-17 23:00:45,476 INFO [org.geoserver] - Loaded feature type 'timeseries_temperature', enabled
2018-02-17 23:00:45,477 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,490 INFO [org.geoserver] - Loaded layer 'timeseries_temperature'
2018-02-17 23:00:45,501 INFO [org.geoserver] - Loaded feature type 'timeseries', enabled
2018-02-17 23:00:45,502 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,507 INFO [org.geoserver] - Loaded layer 'timeseries'
2018-02-17 23:00:45,526 INFO [org.geoserver] - Loaded feature type 'timeseries_barometer', enabled
2018-02-17 23:00:45,527 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,534 INFO [org.geoserver] - Loaded layer 'timeseries_barometer'
2018-02-17 23:00:45,544 INFO [org.geoserver] - Loaded feature type 'timeseries_humidity', enabled
2018-02-17 23:00:45,544 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,554 INFO [org.geoserver] - Loaded layer 'timeseries_humidity'
2018-02-17 23:00:45,584 INFO [org.geoserver] - Loaded feature type 'timeseries_co2', enabled
2018-02-17 23:00:45,585 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,587 INFO [org.geoserver] - Loaded layer 'timeseries_co2'
2018-02-17 23:00:45,604 INFO [org.geoserver] - Loaded feature type 'timeseries_pm25', enabled
2018-02-17 23:00:45,605 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,607 INFO [org.geoserver] - Loaded layer 'timeseries_pm25'
2018-02-17 23:00:45,615 INFO [org.geoserver] - Loaded feature type 'timeseries_pm10', enabled
2018-02-17 23:00:45,615 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,620 INFO [org.geoserver] - Loaded layer 'timeseries_pm10'
2018-02-17 23:00:45,627 INFO [org.geoserver] - Loaded feature type 'timeseries_o3', enabled
2018-02-17 23:00:45,628 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-17 23:00:45,629 INFO [org.geoserver] - Loaded layer 'timeseries_o3'
2018-02-17 23:00:45,797 INFO [org.geoserver] - Loaded store 'pg_smartem_rt', enabled
2018-02-17 23:00:45,807 INFO [org.geoserver] - Loaded data store 'pg_smartem_rt'
2018-02-17 23:00:45,904 INFO [org.geoserver] - Loaded feature type 'last_measurements_temperature', enabled
2018-02-17 23:00:45,912 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:45,922 INFO [org.geoserver] - Loaded layer 'last_measurements_temperature'
2018-02-17 23:00:45,925 INFO [org.geoserver] - Loaded feature type 'cur_measurements_no2', enabled
2018-02-17 23:00:45,926 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:45,932 INFO [org.geoserver] - Loaded layer 'cur_measurements_no2'
2018-02-17 23:00:45,935 INFO [org.geoserver] - Loaded feature type 'last_measurements_humidity', enabled
2018-02-17 23:00:45,935 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:45,940 INFO [org.geoserver] - Loaded layer 'last_measurements_humidity'
2018-02-17 23:00:45,943 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2_raw', enabled
2018-02-17 23:00:45,943 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:45,953 INFO [org.geoserver] - Loaded layer 'last_measurements_no2_raw'
2018-02-17 23:00:45,957 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3_raw', enabled
2018-02-17 23:00:45,962 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:45,971 INFO [org.geoserver] - Loaded layer 'last_measurements_o3_raw'
2018-02-17 23:00:45,983 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm10', enabled
2018-02-17 23:00:45,983 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:45,993 INFO [org.geoserver] - Loaded layer 'last_measurements_pm10'
2018-02-17 23:00:45,998 INFO [org.geoserver] - Loaded feature type 'last_measurements_co', enabled
2018-02-17 23:00:45,998 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,030 INFO [org.geoserver] - Loaded layer 'last_measurements_co'
2018-02-17 23:00:46,071 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2', enabled
2018-02-17 23:00:46,072 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,082 INFO [org.geoserver] - Loaded layer 'last_measurements_no2'
2018-02-17 23:00:46,099 INFO [org.geoserver] - Loaded feature type 'stations', enabled
2018-02-17 23:00:46,099 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,101 INFO [org.geoserver] - Loaded layer 'stations'
2018-02-17 23:00:46,108 INFO [org.geoserver] - Loaded feature type 'last_measurements_noise_level_avg', enabled
2018-02-17 23:00:46,109 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,110 INFO [org.geoserver] - Loaded layer 'last_measurements_noise_level_avg'
2018-02-17 23:00:46,113 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm25', enabled
2018-02-17 23:00:46,120 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,134 INFO [org.geoserver] - Loaded layer 'last_measurements_pm25'
2018-02-17 23:00:46,162 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm10', enabled
2018-02-17 23:00:46,167 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,174 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm10'
2018-02-17 23:00:46,176 INFO [org.geoserver] - Loaded feature type 'cur_measurements_o3', enabled
2018-02-17 23:00:46,177 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,178 INFO [org.geoserver] - Loaded layer 'cur_measurements_o3'
2018-02-17 23:00:46,186 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3', enabled
2018-02-17 23:00:46,187 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,193 INFO [org.geoserver] - Loaded layer 'last_measurements_o3'
2018-02-17 23:00:46,197 INFO [org.geoserver] - Loaded feature type 'last_measurements_barometer', enabled
2018-02-17 23:00:46,197 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,198 INFO [org.geoserver] - Loaded layer 'last_measurements_barometer'
2018-02-17 23:00:46,207 INFO [org.geoserver] - Loaded feature type 'cur_measurements_barometer', enabled
2018-02-17 23:00:46,207 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,208 INFO [org.geoserver] - Loaded layer 'cur_measurements_barometer'
2018-02-17 23:00:46,219 INFO [org.geoserver] - Loaded feature type 'cur_measurements_noise_level_avg', enabled
2018-02-17 23:00:46,219 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,225 INFO [org.geoserver] - Loaded layer 'cur_measurements_noise_level_avg'
2018-02-17 23:00:46,228 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co2', enabled
2018-02-17 23:00:46,228 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,236 INFO [org.geoserver] - Loaded layer 'cur_measurements_co2'
2018-02-17 23:00:46,238 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm25', enabled
2018-02-17 23:00:46,239 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,240 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm25'
2018-02-17 23:00:46,246 INFO [org.geoserver] - Loaded feature type 'last_measurements_co_raw', enabled
2018-02-17 23:00:46,248 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,250 INFO [org.geoserver] - Loaded layer 'last_measurements_co_raw'
2018-02-17 23:00:46,259 INFO [org.geoserver] - Loaded feature type 'cur_measurements_temperature', enabled
2018-02-17 23:00:46,259 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,265 INFO [org.geoserver] - Loaded layer 'cur_measurements_temperature'
2018-02-17 23:00:46,268 INFO [org.geoserver] - Loaded feature type 'last_measurements_co2', enabled
2018-02-17 23:00:46,268 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,270 INFO [org.geoserver] - Loaded layer 'last_measurements_co2'
2018-02-17 23:00:46,280 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co', enabled
2018-02-17 23:00:46,280 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,286 INFO [org.geoserver] - Loaded layer 'cur_measurements_co'
2018-02-17 23:00:46,314 INFO [org.geoserver] - Loaded feature type 'cur_measurements_humidity', enabled
2018-02-17 23:00:46,314 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-17 23:00:46,316 INFO [org.geoserver] - Loaded layer 'cur_measurements_humidity'
2018-02-17 23:00:46,616 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-17 23:00:46,665 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-17 23:00:46,665 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-17 23:00:46,665 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-17 23:00:46,858 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-17 23:00:46,862 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2018-02-17 23:00:46,862 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2018-02-17 23:00:46,862 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-17 23:00:47,314 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2018-02-17 23:00:47,315 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2018-02-17 23:00:47,322 INFO [gwc.layer] - Loading tile layers from gwc-layers
2018-02-17 23:00:47,382 INFO [gwc.layer] - GWC configuration based on GeoServer's Catalog loaded successfuly
2018-02-17 23:00:47,382 INFO [layer.TileLayerDispatcher] - Configuration GeoServer Catalog Configuration contained no layers.
2018-02-17 23:00:47,383 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2018-02-17 23:00:47,383 INFO [config.XMLConfiguration] - Initializing layers from gwc
2018-02-17 23:00:47,383 INFO [layer.TileLayerDispatcher] - Configuration gwc contained no layers.
2018-02-17 23:00:47,411 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-17 23:00:47,411 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to /opt/geoserver/data_dir, using it as the default prefix. ***
2018-02-17 23:00:47,411 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-17 23:00:47,764 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-17 23:00:47,823 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-17 23:00:47,840 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-17 23:00:47,850 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2018-02-17 23:00:47,850 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2018-02-17 23:00:47,857 INFO [diskquota.DiskQuotaMonitor] - 0 layers attached to global quota 500.0 MB
2018-02-17 23:00:47,898 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2018-02-17 23:00:48,564 INFO [org.geoserver] - Loaded service 'wms', enabled
2018-02-17 23:00:48,575 INFO [org.geoserver] - Loaded service 'wcs', enabled
2018-02-17 23:00:48,614 INFO [org.geoserver] - Loaded service 'wfs', enabled
2018-02-17 23:00:48,665 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2018-02-17 23:00:51,370 INFO [ows.OWSHandlerMapping] - Mapped URL path [/gwc/service/**] onto handler 'dispatcher'
2018-02-17 23:00:51,476 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2018-02-17 23:00:51,526 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2018-02-17 23:00:51,619 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2018-02-17 23:00:51,944 INFO [rest.RESTDispatcher] - Created RESTDispatcher with 15 paths
2018-02-17 23:00:52,024 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2018-02-17 23:00:52,028 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2018-02-17 23:00:52,108 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-17 23:00:53,011 INFO [org.geoserver] - GeoServer configuration lock is enabled
2018-02-17 23:00:54,202 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms] onto handler 'dispatcher'
2018-02-17 23:00:54,207 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms/*] onto handler 'dispatcher'
2018-02-17 23:00:54,363 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate/*] onto handler 'dispatcher'
2018-02-17 23:00:54,364 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate] onto handler 'dispatcher'
2018-02-17 23:00:54,571 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows/**] onto handler 'dispatcher'
2018-02-17 23:00:54,572 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows] onto handler 'dispatcher'
2018-02-17 23:00:54,596 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs] onto handler 'dispatcher'
2018-02-17 23:00:54,596 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs/**] onto handler 'dispatcher'
2018-02-17 23:01:01,210 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml] onto handler 'dispatcher'
2018-02-17 23:01:01,211 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/*] onto handler 'dispatcher'
2018-02-17 23:01:01,211 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/icon/**/*] onto handler 'kmlIconService'
2018-02-17 23:01:01,868 INFO [ows.OWSHandlerMapping] - Mapped URL path [/TestWfsPost] onto handler 'wfsTestServlet'
2018-02-17 23:01:01,869 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs/*] onto handler 'dispatcher'
2018-02-17 23:01:01,869 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs] onto handler 'dispatcher'
2018-02-17 23:01:12,860 INFO [geoserver.security] - Start reloading user/groups for service named default
2018-02-17 23:01:12,864 INFO [geoserver.security] - Reloading user/groups successful for service named default
2018-02-17 23:01:13,294 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2018-02-17 23:01:13,295 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2018-02-19 11:29:01,425 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:01,425 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:01,425 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-19 11:29:04,055 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Width = 20
	Height = 20
	Env = {}
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Transparent = true
	Styles = [StyleImpl[ name=stations-active]]
	Exceptions = application/vnd.ogc.se_xml
	LegendOptions = {}
	FeatureType = null
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	Get = false
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-19 11:29:04,976 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=stations-active]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = []
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:05,171 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://pdokt.smartemission.nl:80/geoserver/
    outputFormat = JSON
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@277823c7 (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}timeseries_stations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {http://smartem.geonovum.nl}timeseries_stations
2018-02-19 11:29:05,184 INFO [wfs.json] - about to encode JSON
2018-02-19 11:29:10,474 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:10,511 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:10,611 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:timeseries_no2 identified extends Feature(device_id:device_id,device_meta:device_meta,sensor_meta:sensor_meta,name:name,label:label,unit:unit,value:value,value_raw:value_raw,value_min:value_min,value_max:value_max,time:time,day:day,hour:hour,sample_count:sample_count,point:point,gid:gid,gid_raw:gid_raw)]
	Width = 20
	Height = 20
	Env = {}
	Legends = [LegendRequest [layer=smartem:timeseries_no2, name=http://smartem.geonovum.nl:timeseries_no2 styleName=null, title=timeseries_no2, legendInfo=null]]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	Exceptions = application/vnd.ogc.se_xml
	LegendOptions = {}
	FeatureType = null
	Scale = 1536000.8294399995
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:timeseries_no2, TRANSPARENT=TRUE}
	Get = false
	RequestCharset = null
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-19 11:29:10,762 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [Mon Feb 19 10:00:00 CET 2018]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2018-02-19T09:00:00.000Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:12,874 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:12,914 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:12,970 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:13,004 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:12,995 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Jan 20 19:00:00 CET 2018, Sat Jan 20 19:00:00 CET 2018]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2018-01-20T18:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:13,011 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:13,031 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Thu Dec 28 01:00:00 CET 2017, Thu Dec 28 01:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-12-28T00:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:13,084 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon Jan 29 16:00:00 CET 2018, Mon Jan 29 16:00:00 CET 2018]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2018-01-29T15:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:13,148 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Wed Dec 13 05:00:00 CET 2017, Wed Dec 13 05:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-12-13T04:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:13,173 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Dec 16 04:00:00 CET 2017, Sat Dec 16 04:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-12-16T03:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,033 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,079 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Fri Dec 01 08:00:00 CET 2017, Fri Dec 01 08:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-12-01T07:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,101 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,114 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,129 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,188 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,191 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,203 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,222 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,262 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,344 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun Nov 19 11:00:00 CET 2017, Sun Nov 19 11:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-11-19T10:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,364 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Wed Nov 22 10:00:00 CET 2017, Wed Nov 22 10:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-11-22T09:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,368 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:14,374 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Thu Nov 16 12:00:00 CET 2017, Thu Nov 16 12:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-11-16T11:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,429 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon Oct 23 19:00:00 CEST 2017, Mon Oct 23 19:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-10-23T17:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,453 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Fri Oct 20 19:00:00 CEST 2017, Fri Oct 20 19:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-10-20T17:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,479 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Nov 25 09:00:00 CET 2017, Sat Nov 25 09:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-11-25T08:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,675 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun Oct 29 16:00:00 CET 2017, Sun Oct 29 16:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-10-29T15:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,691 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Wed Oct 11 22:00:00 CEST 2017, Wed Oct 11 22:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-10-11T20:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:14,749 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Oct 14 21:00:00 CEST 2017, Sat Oct 14 21:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-10-14T19:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,394 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,431 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Wed Sep 27 02:00:00 CEST 2017, Wed Sep 27 02:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-09-27T00:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,439 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,473 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,500 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,502 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,507 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Aug 19 12:00:00 CEST 2017, Sat Aug 19 12:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-08-19T10:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,523 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,698 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,708 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,710 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,713 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,737 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun May 28 09:00:00 CEST 2017, Sun May 28 09:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-05-28T07:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,738 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Jun 24 02:00:00 CEST 2017, Sat Jun 24 02:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-06-24T00:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,753 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Jun 03 08:00:00 CEST 2017, Sat Jun 03 08:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-06-03T06:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,776 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun Jul 23 18:00:00 CEST 2017, Sun Jul 23 18:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-07-23T16:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,836 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon May 22 11:00:00 CEST 2017, Mon May 22 11:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-05-22T09:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,854 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,857 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,914 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,921 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat May 13 13:00:00 CEST 2017, Sat May 13 13:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-05-13T11:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:15,925 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,936 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,945 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:15,969 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun May 07 14:00:00 CEST 2017, Sun May 07 14:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-05-07T12:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,026 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Thu May 25 10:00:00 CEST 2017, Thu May 25 10:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-05-25T08:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,043 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon Mar 27 01:00:00 CEST 2017, Mon Mar 27 01:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-03-26T23:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,096 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Thu May 04 15:00:00 CEST 2017, Thu May 04 15:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-05-04T13:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,122 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:16,111 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Wed Feb 22 09:00:00 CET 2017, Wed Feb 22 09:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-02-22T08:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,131 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon May 01 16:00:00 CEST 2017, Mon May 01 16:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-05-01T14:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,101 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun Apr 16 20:00:00 CEST 2017, Sun Apr 16 20:00:00 CEST 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-04-16T18:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,154 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun Jan 29 15:00:00 CET 2017, Sun Jan 29 15:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-01-29T14:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:16,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:16,352 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Thu Jan 05 21:00:00 CET 2017, Thu Jan 05 21:00:00 CET 2017]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2017-01-05T20:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,403 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Fri Dec 30 22:00:00 CET 2016, Fri Dec 30 22:00:00 CET 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-12-30T21:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:16,411 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Tue Dec 27 23:00:00 CET 2016, Tue Dec 27 23:00:00 CET 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-12-27T22:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,237 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,294 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Dec 10 04:00:00 CET 2016, Sat Dec 10 04:00:00 CET 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-12-10T03:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,297 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,402 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,405 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,409 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,418 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,472 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,482 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,539 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:17,598 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Fri Aug 19 10:00:00 CEST 2016, Fri Aug 19 10:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-08-19T08:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,637 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Fri Nov 04 13:00:00 CET 2016, Fri Nov 04 13:00:00 CET 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-11-04T12:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,643 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Fri Oct 14 19:00:00 CEST 2016, Fri Oct 14 19:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-10-14T17:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,654 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sun Oct 02 22:00:00 CEST 2016, Sun Oct 02 22:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-10-02T20:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,657 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Tue Oct 11 20:00:00 CEST 2016, Tue Oct 11 20:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-10-11T18:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,745 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Tue Sep 27 00:00:00 CEST 2016, Tue Sep 27 00:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-09-26T22:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,748 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon Sep 12 04:00:00 CEST 2016, Mon Sep 12 04:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-09-12T02:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:17,763 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Sat Aug 13 11:00:00 CEST 2016, Sat Aug 13 11:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-08-13T09:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:19,716 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:19,740 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:19,784 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon Aug 01 15:00:00 CEST 2016, Mon Aug 01 15:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-08-01T13:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:19,788 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:19,824 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:19,863 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:19,864 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Fri Jul 29 15:00:00 CEST 2016, Fri Jul 29 15:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-07-29T13:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:19,967 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-19 11:29:19,976 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Thu Jul 14 19:00:00 CEST 2016, Thu Jul 14 19:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-07-14T17:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:19,989 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Wed Jul 20 18:00:00 CEST 2016, Wed Jul 20 18:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-07-20T16:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:20,068 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Mon Jul 11 20:00:00 CEST 2016, Mon Jul 11 20:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-07-11T18:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-19 11:29:20,125 INFO [geoserver.wms] - 
Request: getMap
	Layers = [org.geoserver.wms.MapLayerInfo@39b0c9e2]
	Width = 1105
	Height = 1261
	Filters = null
	TilesOrigin = null
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-87726.72 : 387726.72, 218727.04 : 761272.96]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	FeatureVersion = null
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Styles = [StyleImpl[ name=meas_no2_color_range, DEFAULT]]
	StyleFormat = sld
	StyleBody = null
	SldVersion = null
	Exceptions = SE_XML
	Palette = null
	Tiled = false
	ScaleMethod = null
	Interpolations = []
	MaxFeatures = null
	StyleVersion = null
	SRS = EPSG:28992
	Filter = null
	Time = [[Tue Jul 05 21:00:00 CEST 2016, Tue Jul 05 21:00:00 CEST 2016]]
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-87726.72,218727.04,387726.72,761272.96, VERSION=1.1.1, STYLES=, SERVICE=WMS, TIME=2016-07-05T19:00:00Z, WIDTH=1105, HEIGHT=1261, TRANSPARENT=TRUE, LAYERS=smartem:timeseries_no2}
	Get = true
	RequestCharset = UTF-8
	Version = 1.1.1
	Request = GetMap
2018-02-21 14:09:36,860 INFO [georss.GeoRSSPoller] - destroy() invoked
2018-02-21 14:09:36,861 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2018-02-21 14:09:36,863 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2018-02-21 14:09:36,871 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2018-02-21 14:09:36,871 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2018-02-21 14:09:36,879 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2018-02-21 14:09:36,880 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2018-02-21 14:09:36,880 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2018-02-21 14:09:36,881 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2018-02-21 14:09:36,881 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2018-02-21 14:09:36,882 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2018-02-21 14:09:36,910 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2018-02-21 14:41:48,365 INFO [org.geoserver] - Loaded style 'stations-active'
2018-02-21 14:41:48,425 INFO [org.geoserver] - Loaded style 'restricted'
2018-02-21 14:41:48,450 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-21 14:41:48,460 INFO [org.geoserver] - Loaded style 'point'
2018-02-21 14:41:48,464 INFO [org.geoserver] - Loaded style 'line'
2018-02-21 14:41:48,468 INFO [org.geoserver] - Loaded style 'giant_polygon'
2018-02-21 14:41:48,472 INFO [org.geoserver] - Loaded style 'pophatch'
2018-02-21 14:41:48,475 INFO [org.geoserver] - Loaded style 'simple_streams'
2018-02-21 14:41:48,480 INFO [org.geoserver] - Loaded style 'simple_roads'
2018-02-21 14:41:48,483 INFO [org.geoserver] - Loaded style 'dem'
2018-02-21 14:41:48,487 INFO [org.geoserver] - Loaded style 'raster'
2018-02-21 14:41:48,492 INFO [org.geoserver] - Loaded style 'stations'
2018-02-21 14:41:48,496 INFO [org.geoserver] - Loaded style 'generic'
2018-02-21 14:41:48,500 INFO [org.geoserver] - Loaded style 'polygon'
2018-02-21 14:41:48,506 INFO [org.geoserver] - Loaded style 'stations-inactive'
2018-02-21 14:41:48,601 INFO [org.geoserver] - Loaded style 'burg'
2018-02-21 14:41:48,605 INFO [org.geoserver] - Loaded style 'capitals'
2018-02-21 14:41:48,609 INFO [org.geoserver] - Loaded style 'population'
2018-02-21 14:41:48,614 INFO [org.geoserver] - Loaded style 'green'
2018-02-21 14:41:48,619 INFO [org.geoserver] - Loaded style 'tiger_roads'
2018-02-21 14:41:48,623 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2018-02-21 14:41:48,627 INFO [org.geoserver] - Loaded style 'cite_lakes'
2018-02-21 14:41:48,631 INFO [org.geoserver] - Loaded style 'grass'
2018-02-21 14:41:48,635 INFO [org.geoserver] - Loaded style 'poi'
2018-02-21 14:41:48,639 INFO [org.geoserver] - Loaded style 'rain'
2018-02-21 14:41:48,644 INFO [org.geoserver] - Loaded style 'meteo'
2018-02-21 14:41:48,652 INFO [org.geoserver] - Loaded default workspace smartem
2018-02-21 14:41:48,674 INFO [org.geoserver] - Loaded workspace 'smartem'
2018-02-21 14:41:48,711 INFO [org.geoserver] - Loaded style 'meas_o3_color_range'
2018-02-21 14:41:48,735 INFO [org.geoserver] - Loaded style 'meas_co2_color_range'
2018-02-21 14:41:48,740 INFO [org.geoserver] - Loaded style 'meas_noise_level_range'
2018-02-21 14:41:48,754 INFO [org.geoserver] - Loaded style 'meas_co_plain'
2018-02-21 14:41:48,760 INFO [org.geoserver] - Loaded style 'meas_kohm_raw'
2018-02-21 14:41:48,766 INFO [org.geoserver] - Loaded style 'meas_pm10_color_range'
2018-02-21 14:41:48,771 INFO [org.geoserver] - Loaded style 'meas_no2_color_range'
2018-02-21 14:41:48,776 INFO [org.geoserver] - Loaded style 'meas_pm25_color_range'
2018-02-21 14:41:49,651 INFO [org.geoserver] - Loaded store 'pg_smartem_rt', enabled
2018-02-21 14:41:49,662 INFO [org.geoserver] - Loaded data store 'pg_smartem_rt'
2018-02-21 14:41:54,238 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co2', enabled
2018-02-21 14:41:54,266 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,468 INFO [org.geoserver] - Loaded layer 'cur_measurements_co2'
2018-02-21 14:41:54,503 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm25', enabled
2018-02-21 14:41:54,504 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,509 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm25'
2018-02-21 14:41:54,527 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm10', enabled
2018-02-21 14:41:54,534 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,544 INFO [org.geoserver] - Loaded layer 'last_measurements_pm10'
2018-02-21 14:41:54,593 INFO [org.geoserver] - Loaded feature type 'last_measurements_co2', enabled
2018-02-21 14:41:54,594 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,600 INFO [org.geoserver] - Loaded layer 'last_measurements_co2'
2018-02-21 14:41:54,626 INFO [org.geoserver] - Loaded feature type 'last_measurements_pm25', enabled
2018-02-21 14:41:54,627 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,638 INFO [org.geoserver] - Loaded layer 'last_measurements_pm25'
2018-02-21 14:41:54,664 INFO [org.geoserver] - Loaded feature type 'last_measurements_co_raw', enabled
2018-02-21 14:41:54,664 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,670 INFO [org.geoserver] - Loaded layer 'last_measurements_co_raw'
2018-02-21 14:41:54,681 INFO [org.geoserver] - Loaded feature type 'cur_measurements_noise_level_avg', enabled
2018-02-21 14:41:54,682 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,710 INFO [org.geoserver] - Loaded layer 'cur_measurements_noise_level_avg'
2018-02-21 14:41:54,774 INFO [org.geoserver] - Loaded feature type 'last_measurements_humidity', enabled
2018-02-21 14:41:54,774 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,790 INFO [org.geoserver] - Loaded layer 'last_measurements_humidity'
2018-02-21 14:41:54,807 INFO [org.geoserver] - Loaded feature type 'cur_measurements_co', enabled
2018-02-21 14:41:54,807 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,815 INFO [org.geoserver] - Loaded layer 'cur_measurements_co'
2018-02-21 14:41:54,844 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2', enabled
2018-02-21 14:41:54,844 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,852 INFO [org.geoserver] - Loaded layer 'last_measurements_no2'
2018-02-21 14:41:54,863 INFO [org.geoserver] - Loaded feature type 'last_measurements_temperature', enabled
2018-02-21 14:41:54,864 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,877 INFO [org.geoserver] - Loaded layer 'last_measurements_temperature'
2018-02-21 14:41:54,887 INFO [org.geoserver] - Loaded feature type 'cur_measurements_pm10', enabled
2018-02-21 14:41:54,888 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,892 INFO [org.geoserver] - Loaded layer 'cur_measurements_pm10'
2018-02-21 14:41:54,921 INFO [org.geoserver] - Loaded feature type 'cur_measurements_barometer', enabled
2018-02-21 14:41:54,921 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,927 INFO [org.geoserver] - Loaded layer 'cur_measurements_barometer'
2018-02-21 14:41:54,966 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3_raw', enabled
2018-02-21 14:41:54,971 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:54,980 INFO [org.geoserver] - Loaded layer 'last_measurements_o3_raw'
2018-02-21 14:41:55,001 INFO [org.geoserver] - Loaded feature type 'last_measurements_co', enabled
2018-02-21 14:41:55,001 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,011 INFO [org.geoserver] - Loaded layer 'last_measurements_co'
2018-02-21 14:41:55,025 INFO [org.geoserver] - Loaded feature type 'cur_measurements_humidity', enabled
2018-02-21 14:41:55,034 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,048 INFO [org.geoserver] - Loaded layer 'cur_measurements_humidity'
2018-02-21 14:41:55,058 INFO [org.geoserver] - Loaded feature type 'last_measurements_barometer', enabled
2018-02-21 14:41:55,059 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,064 INFO [org.geoserver] - Loaded layer 'last_measurements_barometer'
2018-02-21 14:41:55,072 INFO [org.geoserver] - Loaded feature type 'cur_measurements_no2', enabled
2018-02-21 14:41:55,072 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,076 INFO [org.geoserver] - Loaded layer 'cur_measurements_no2'
2018-02-21 14:41:55,085 INFO [org.geoserver] - Loaded feature type 'last_measurements_no2_raw', enabled
2018-02-21 14:41:55,085 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,089 INFO [org.geoserver] - Loaded layer 'last_measurements_no2_raw'
2018-02-21 14:41:55,102 INFO [org.geoserver] - Loaded feature type 'last_measurements_noise_level_avg', enabled
2018-02-21 14:41:55,103 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,107 INFO [org.geoserver] - Loaded layer 'last_measurements_noise_level_avg'
2018-02-21 14:41:55,115 INFO [org.geoserver] - Loaded feature type 'cur_measurements_o3', enabled
2018-02-21 14:41:55,116 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,122 INFO [org.geoserver] - Loaded layer 'cur_measurements_o3'
2018-02-21 14:41:55,131 INFO [org.geoserver] - Loaded feature type 'cur_measurements_temperature', enabled
2018-02-21 14:41:55,132 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,148 INFO [org.geoserver] - Loaded layer 'cur_measurements_temperature'
2018-02-21 14:41:55,179 INFO [org.geoserver] - Loaded feature type 'last_measurements_o3', enabled
2018-02-21 14:41:55,180 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,197 INFO [org.geoserver] - Loaded layer 'last_measurements_o3'
2018-02-21 14:41:55,214 INFO [org.geoserver] - Loaded feature type 'stations', enabled
2018-02-21 14:41:55,222 INFO [org.geoserver] - Loaded feature type 'pg_smartem_rt'
2018-02-21 14:41:55,232 INFO [org.geoserver] - Loaded layer 'stations'
2018-02-21 14:41:55,287 INFO [org.geoserver] - Loaded store 'pg_smartem_refined', enabled
2018-02-21 14:41:55,287 INFO [org.geoserver] - Loaded data store 'pg_smartem_refined'
2018-02-21 14:41:55,423 INFO [org.geoserver] - Loaded feature type 'timeseries_no2', enabled
2018-02-21 14:41:55,432 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,438 INFO [org.geoserver] - Loaded layer 'timeseries_no2'
2018-02-21 14:41:55,485 INFO [org.geoserver] - Loaded feature type 'timeseries_o3', enabled
2018-02-21 14:41:55,486 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,491 INFO [org.geoserver] - Loaded layer 'timeseries_o3'
2018-02-21 14:41:55,501 INFO [org.geoserver] - Loaded feature type 'timeseries_no2_raw', enabled
2018-02-21 14:41:55,501 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,506 INFO [org.geoserver] - Loaded layer 'timeseries_no2_raw'
2018-02-21 14:41:55,516 INFO [org.geoserver] - Loaded feature type 'timeseries_pm10', enabled
2018-02-21 14:41:55,516 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,521 INFO [org.geoserver] - Loaded layer 'timeseries_pm10'
2018-02-21 14:41:55,554 INFO [org.geoserver] - Loaded feature type 'timeseries_o3_raw', enabled
2018-02-21 14:41:55,555 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,560 INFO [org.geoserver] - Loaded layer 'timeseries_o3_raw'
2018-02-21 14:41:55,569 INFO [org.geoserver] - Loaded feature type 'timeseries_pm25', enabled
2018-02-21 14:41:55,570 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,575 INFO [org.geoserver] - Loaded layer 'timeseries_pm25'
2018-02-21 14:41:55,585 INFO [org.geoserver] - Loaded feature type 'timeseries_temperature', enabled
2018-02-21 14:41:55,586 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,590 INFO [org.geoserver] - Loaded layer 'timeseries_temperature'
2018-02-21 14:41:55,602 INFO [org.geoserver] - Loaded feature type 'timeseries_barometer', enabled
2018-02-21 14:41:55,603 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,609 INFO [org.geoserver] - Loaded layer 'timeseries_barometer'
2018-02-21 14:41:55,622 INFO [org.geoserver] - Loaded feature type 'timeseries_humidity', enabled
2018-02-21 14:41:55,622 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,631 INFO [org.geoserver] - Loaded layer 'timeseries_humidity'
2018-02-21 14:41:55,641 INFO [org.geoserver] - Loaded feature type 'timeseries_co_raw', enabled
2018-02-21 14:41:55,641 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,647 INFO [org.geoserver] - Loaded layer 'timeseries_co_raw'
2018-02-21 14:41:55,657 INFO [org.geoserver] - Loaded feature type 'timeseries_co2', enabled
2018-02-21 14:41:55,657 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,663 INFO [org.geoserver] - Loaded layer 'timeseries_co2'
2018-02-21 14:41:55,672 INFO [org.geoserver] - Loaded feature type 'timeseries_stations', enabled
2018-02-21 14:41:55,673 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,678 INFO [org.geoserver] - Loaded layer 'timeseries_stations'
2018-02-21 14:41:55,689 INFO [org.geoserver] - Loaded feature type 'timeseries_noise_level_avg', enabled
2018-02-21 14:41:55,690 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,695 INFO [org.geoserver] - Loaded layer 'timeseries_noise_level_avg'
2018-02-21 14:41:55,704 INFO [org.geoserver] - Loaded feature type 'timeseries', enabled
2018-02-21 14:41:55,704 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,710 INFO [org.geoserver] - Loaded layer 'timeseries'
2018-02-21 14:41:55,724 INFO [org.geoserver] - Loaded feature type 'timeseries_co', enabled
2018-02-21 14:41:55,724 INFO [org.geoserver] - Loaded feature type 'pg_smartem_refined'
2018-02-21 14:41:55,746 INFO [org.geoserver] - Loaded layer 'timeseries_co'
2018-02-21 14:41:56,013 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-21 14:41:56,063 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-21 14:41:56,063 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-21 14:41:56,064 INFO [config.XMLFileResourceProvider] - Found configuration file in gwc
2018-02-21 14:41:56,324 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-21 14:41:56,324 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2018-02-21 14:41:56,324 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2018-02-21 14:41:56,325 WARN [config.XMLConfiguration] - ********************************************************************************
2018-02-21 14:41:56,627 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2018-02-21 14:41:56,628 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2018-02-21 14:41:56,635 INFO [gwc.layer] - Loading tile layers from gwc-layers
2018-02-21 14:41:56,671 INFO [gwc.layer] - GWC configuration based on GeoServer's Catalog loaded successfuly
2018-02-21 14:41:56,672 INFO [layer.TileLayerDispatcher] - Configuration GeoServer Catalog Configuration contained no layers.
2018-02-21 14:41:56,672 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2018-02-21 14:41:56,672 INFO [config.XMLConfiguration] - Initializing layers from gwc
2018-02-21 14:41:56,673 INFO [layer.TileLayerDispatcher] - Configuration gwc contained no layers.
2018-02-21 14:41:56,722 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-21 14:41:56,722 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to /opt/geoserver/data_dir, using it as the default prefix. ***
2018-02-21 14:41:56,722 INFO [storage.DefaultStorageFinder] - ****************************************************************************************************************************
2018-02-21 14:41:56,857 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-21 14:41:56,896 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-21 14:41:56,917 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2018-02-21 14:41:56,924 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2018-02-21 14:41:56,924 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2018-02-21 14:41:56,932 INFO [diskquota.DiskQuotaMonitor] - 0 layers attached to global quota 500.0 MB
2018-02-21 14:41:56,980 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2018-02-21 14:41:57,759 INFO [org.geoserver] - Loaded service 'wms', enabled
2018-02-21 14:41:57,785 INFO [org.geoserver] - Loaded service 'wcs', enabled
2018-02-21 14:41:57,819 INFO [org.geoserver] - Loaded service 'wfs', enabled
2018-02-21 14:41:57,865 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2018-02-21 14:42:00,855 INFO [ows.OWSHandlerMapping] - Mapped URL path [/gwc/service/**] onto handler 'dispatcher'
2018-02-21 14:42:00,945 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2018-02-21 14:42:00,975 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2018-02-21 14:42:00,981 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2018-02-21 14:42:01,187 INFO [rest.RESTDispatcher] - Created RESTDispatcher with 15 paths
2018-02-21 14:42:01,269 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2018-02-21 14:42:01,269 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2018-02-21 14:42:01,321 INFO [config.XMLFileResourceProvider] - Will look for geowebcache.xml in '/opt/geoserver/data_dir/gwc'
2018-02-21 14:42:01,960 INFO [org.geoserver] - GeoServer configuration lock is enabled
2018-02-21 14:42:03,286 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms] onto handler 'dispatcher'
2018-02-21 14:42:03,286 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wms/*] onto handler 'dispatcher'
2018-02-21 14:42:03,597 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate/*] onto handler 'dispatcher'
2018-02-21 14:42:03,597 INFO [ows.OWSHandlerMapping] - Mapped URL path [/animate] onto handler 'dispatcher'
2018-02-21 14:42:04,012 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows/**] onto handler 'dispatcher'
2018-02-21 14:42:04,014 INFO [ows.OWSHandlerMapping] - Mapped URL path [/ows] onto handler 'dispatcher'
2018-02-21 14:42:04,105 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs] onto handler 'dispatcher'
2018-02-21 14:42:04,105 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wcs/**] onto handler 'dispatcher'
2018-02-21 14:42:11,181 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml] onto handler 'dispatcher'
2018-02-21 14:42:11,182 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/*] onto handler 'dispatcher'
2018-02-21 14:42:11,182 INFO [ows.OWSHandlerMapping] - Mapped URL path [/kml/icon/**/*] onto handler 'kmlIconService'
2018-02-21 14:42:12,058 INFO [ows.OWSHandlerMapping] - Mapped URL path [/TestWfsPost] onto handler 'wfsTestServlet'
2018-02-21 14:42:12,062 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs/*] onto handler 'dispatcher'
2018-02-21 14:42:12,063 INFO [ows.OWSHandlerMapping] - Mapped URL path [/wfs] onto handler 'dispatcher'
2018-02-21 14:42:22,068 INFO [geoserver.security] - Start reloading user/groups for service named default
2018-02-21 14:42:22,092 INFO [geoserver.security] - Reloading user/groups successful for service named default
2018-02-21 14:42:22,973 INFO [geoserver.security] - AuthenticationCache Initialized with 1000 Max Entries, 300 seconds idle time, 600 seconds time to live and 3 concurrency level
2018-02-21 14:42:22,974 INFO [geoserver.security] - AuthenticationCache Eviction Task created to run every 600 seconds
2018-02-21 14:43:13,933 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-21 14:43:13,933 INFO [geoserver.wfs] - 
Request: getServiceInfo
2018-02-21 14:43:13,933 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-21 14:43:15,931 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 2.0.0
    baseUrl = http://pdokt.smartemission.nl:80/geoserver/
    outputFormat = JSON
    resolve = none
    resolveDepth = *
    resolveTimeout = 300
    resultType = results
    abstractQueryExpressionGroup[0] = wfs:abstractQueryExpression=net.opengis.wfs20.impl.QueryTypeImpl@24eeb03a (handle: null) (abstractProjectionClause: null, abstractSelectionClause: null, abstractSortingClause: null, aliases: null, typeNames: [{http://smartem.geonovum.nl}timeseries_stations]) (featureVersion: null, srsName: null, filter: null, propertyNames: null, sortBy: null)
    abstractQueryExpression[0]:
        typeNames[0] = {http://smartem.geonovum.nl}timeseries_stations
2018-02-21 14:43:16,070 INFO [wfs.json] - about to encode JSON
2018-02-21 14:43:16,863 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Styles = [StyleImpl[ name=stations-active]]
	FeatureType = null
	Env = {}
	LegendOptions = {}
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:stations identified extends Feature(gid:gid,device_id:device_id,device_subid:device_subid,project_id:project_id,device_name:device_name,device_meta:device_meta,point:point,altitude:altitude,value_stale:value_stale,last_update:last_update,lon:lon,lat:lat)]
	Legends = [LegendRequest [layer=smartem:stations, name=http://smartem.geonovum.nl:stations styleName=null, title=stations, legendInfo=null]]
	Width = 20
	Height = 20
	Scale = 1536000.8294399995
	Transparent = true
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, STYLE=stations-active, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:stations, TRANSPARENT=TRUE}
	RequestCharset = null
	Get = false
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-21 14:43:17,331 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Exceptions = SE_XML
	Styles = [StyleImpl[ name=stations-active]]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-65792.64 : 365792.64, 311624.32 : 668375.68]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	MaxFeatures = null
	TilesOrigin = null
	Interpolations = []
	FeatureVersion = null
	Palette = null
	StyleFormat = sld
	Layers = [org.geoserver.wms.MapLayerInfo@46bac1d9]
	Tiled = false
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	SRS = EPSG:28992
	Width = 1003
	Height = 829
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-65792.64,311624.32,365792.64,668375.68, VERSION=1.1.1, STYLES=stations-active, SERVICE=WMS, WIDTH=1003, HEIGHT=829, TRANSPARENT=TRUE, LAYERS=smartem:stations}
	RequestCharset = UTF-8
	Get = true
	Version = 1.1.1
	Request = GetMap
2018-02-21 14:43:21,141 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-21 14:43:21,147 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-02-21 14:43:21,208 INFO [geoserver.wms] - 
Request: getLegendGraphic
	Exceptions = application/vnd.ogc.se_xml
	Styles = [StyleImpl[ name=meas_co_plain, DEFAULT]]
	FeatureType = null
	Env = {}
	LegendOptions = {}
	Layers = [SimpleFeatureTypeImpl http://smartem.geonovum.nl:cur_measurements_co identified extends Feature(gid:gid,unique_id:unique_id,device_id:device_id,device_name:device_name,device_meta:device_meta,sensor_meta:sensor_meta,label:label,unit:unit,name:name,value_raw:value_raw,value_stale:value_stale,sample_time:sample_time,value:value,point:point,altitude:altitude,lon:lon,lat:lat,timestamp:timestamp)]
	Legends = [LegendRequest [layer=smartem:cur_measurements_co, name=http://smartem.geonovum.nl:cur_measurements_co styleName=null, title=cur_measurements_co, legendInfo=null]]
	Width = 20
	Height = 20
	Scale = 1536000.8294399995
	Transparent = true
	Locale = null
	Format = image/png
	Rules = [null]
	Strict = true
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {EXCEPTIONS=application/vnd.ogc.se_xml, REQUEST=GetLegendGraphic, FORMAT=image/png, VERSION=1.1.1, SERVICE=WMS, SCALE=1536000.8294399995, LAYER=smartem:cur_measurements_co, TRANSPARENT=TRUE}
	RequestCharset = null
	Get = false
	Version = 1.1.1
	Request = GetLegendGraphic
2018-02-21 14:43:21,298 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Exceptions = SE_XML
	Styles = [StyleImpl[ name=meas_co_plain, DEFAULT]]
	Crs = PROJCS["Amersfoort / RD New", 
  GEOGCS["Amersfoort", 
    DATUM["Amersfoort", 
      SPHEROID["Bessel 1841", 6377397.155, 299.1528128, AUTHORITY["EPSG","7004"]], 
      TOWGS84[565.2369, 50.0087, 465.658, -0.40685733032239757, -0.3507326765425626, 1.8703473836067959, 4.0812], 
      AUTHORITY["EPSG","6289"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4289"]], 
  PROJECTION["Oblique_Stereographic", AUTHORITY["EPSG","9809"]], 
  PARAMETER["central_meridian", 5.387638888888891], 
  PARAMETER["latitude_of_origin", 52.15616055555556], 
  PARAMETER["scale_factor", 0.9999079], 
  PARAMETER["false_easting", 155000.0], 
  PARAMETER["false_northing", 463000.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","28992"]]
	Bbox = SRSEnvelope[-65792.64 : 365792.64, 311624.32 : 668375.68]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	MaxFeatures = null
	TilesOrigin = null
	Interpolations = []
	FeatureVersion = null
	Palette = null
	StyleFormat = sld
	Layers = [org.geoserver.wms.MapLayerInfo@d8868895]
	Tiled = false
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	SRS = EPSG:28992
	Width = 1003
	Height = 829
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {FORMAT=image/png, REQUEST=GetMap, SRS=EPSG:28992, BBOX=-65792.64,311624.32,365792.64,668375.68, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=1003, HEIGHT=829, TRANSPARENT=TRUE, LAYERS=smartem:cur_measurements_co}
	RequestCharset = UTF-8
	Get = true
	Version = 1.1.1
	Request = GetMap
2018-03-01 16:48:40,955 WARN [geoserver.web] - Unable to find property: 'format.wms.rss' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2018-03-01 16:48:41,173 WARN [geoserver.web] - Unable to find property: 'format.wms.application/vnd.google-earth.kml' for component:  [class=org.geoserver.web.demo.MapPreviewPage]. Locale: null, style: null
2018-03-01 16:49:04,618 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-03-01 16:49:06,613 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Exceptions = SE_XML
	Styles = [StyleImpl[ name=meas_co2_color_range, DEFAULT]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Bbox = SRSEnvelope[5.67196 : 5.876663, 51.472498 : 51.868101]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	MaxFeatures = null
	TilesOrigin = null
	Interpolations = []
	FeatureVersion = null
	Palette = null
	StyleFormat = sld
	Layers = [org.geoserver.wms.MapLayerInfo@68985243]
	Tiled = false
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	SRS = EPSG:4326
	Width = 397
	Height = 768
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = false
	Time = []
	Filter = null
	Buffer = 0
	Format = application/openlayers
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {REQUEST=GetMap, SRS=EPSG:4326, FORMAT=application/openlayers, BBOX=5.67196,51.472498,5.876663,51.868101, VERSION=1.1.0, STYLES=, SERVICE=WMS, WIDTH=397, HEIGHT=768, LAYERS=smartem:last_measurements_co2}
	RequestCharset = UTF-8
	Get = true
	Version = 1.1.0
	Request = GetMap
2018-03-01 16:49:06,980 INFO [geoserver.wms] - 
Request: getServiceInfo
2018-03-01 16:49:07,512 INFO [geoserver.wms] - 
Request: getMap
	Filters = null
	Exceptions = SE_XML
	Styles = [StyleImpl[ name=meas_co2_color_range, DEFAULT]]
	Crs = GEOGCS["WGS 84", 
  DATUM["World Geodetic System 1984", 
    SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
    AUTHORITY["EPSG","6326"]], 
  PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
  UNIT["degree", 0.017453292519943295], 
  AXIS["Geodetic longitude", EAST], 
  AXIS["Geodetic latitude", NORTH], 
  AUTHORITY["EPSG","4326"]]
	Bbox = SRSEnvelope[5.637702941894531 : 5.910301208496094, 51.406402587890625 : 51.933746337890625]
	RemoteOwsType = null
	RemoteOwsURL = null
	Env = {}
	FormatOptions = {}
	Angle = 0.0
	CQLFilter = null
	Elevation = []
	FeatureId = null
	StartIndex = null
	ViewParams = null
	MaxFeatures = null
	TilesOrigin = null
	Interpolations = []
	FeatureVersion = null
	Palette = null
	StyleFormat = sld
	Layers = [org.geoserver.wms.MapLayerInfo@68985243]
	Tiled = false
	SldBody = null
	ValidateSchema = false
	Sld = null
	StyleUrl = null
	StyleBody = null
	SldVersion = null
	StyleVersion = null
	ScaleMethod = null
	SRS = EPSG:4326
	Width = 397
	Height = 768
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Transparent = true
	Time = []
	Filter = null
	Buffer = 0
	Format = image/png
	BaseUrl = http://pdokt.smartemission.nl:80/geoserver/
	RawKvp = {REQUEST=GetMap, FORMAT=image/png, SRS=EPSG:4326, BBOX=5.637702941894531,51.406402587890625,5.910301208496094,51.933746337890625, VERSION=1.1.1, STYLES=, SERVICE=WMS, WIDTH=397, HEIGHT=768, TRANSPARENT=true, LAYERS=smartem:last_measurements_co2}
	RequestCharset = UTF-8
	Get = true
	Version = 1.1.1
	Request = GetMap
